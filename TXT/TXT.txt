/***************************************************************/

Digital_tube_TEXT();	//任务板测试

Dimming(1);				//调光
Stadiometry();			//测距
ETC_detection();		//ETC
SYN_Extern();			//语音识别					


Digital_tube_dynamic_display(66,1);				//数码管
Task_board_buzzer();							//任务板蜂鸣器
Task_board_turn_light();						//任务板转向灯

TFT_Test_Zigbee('B',0x11,0x11,0x11);			//TFTA显示		


uploading_flat_computer(0xB0);									// 发送开始TFTA
uploading_flat_computer(0xB1);									// 发送开始TFTB
uploading_flat_computer(0xB2);								    // 发送交通灯A识别
uploading_flat_computer(0xB3);								    // 发送交通灯B识别
uploading_flat_computer(0xB4);									// 发送开始二维码A识别

Send_Zigbee_Data(0x00,0x00,0x00,0x00);					        // 发送启动副车

Timeout_detection(30,0xA1,0x02);								// TFTA(图形)30s超时检测
Timeout_detection(15,0xA2,0x03);								// 交通灯15s超时检测	
Timeout_detection(10,0xA3,0x04);								// 二维码A10s超时检测						
Timeout_detection(60,0xA4,0x05);								// 副车


Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    	// LED显示标志物计时模式 -> 开启					
Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	// 道闸 -> 开启
Send_ZigbeeData_To_Fifo(GarageA_To1, 8);		// 立体车库A到达第一层	



YY_Play_Zigbee("你好");							// 制语音播报标志物播报指定文本信息
Rotate_Dis_Inf(200);							// 立体显示标志物显示距离信息（单位：mm）
Rotate_show_Inf("A123B4",'C','5');				// 立体显示标志物显示车牌数据
LED_Dis_Zigbee(123);							// LED显示标志物显示测距信息
LED_Date_Zigbee(0x12,0x34,0x56,0x01);			// LED显示标志物显示数据
Gate_Show_Zigbee("A123B4");                     // 道闸系统标志物显示车牌
TFT_Dis_Zigbee('A',123);						// 智能TFT显示器显示距离信息
TFT_Show_Zigbee('A',"A123B4");					// TFT显示器显示车牌



/*密钥更改*/
KEY_Open[0]=0xff;
KEY_Open[1]=0xff;
KEY_Open[2]=0xff;
KEY_Open[3]=0xff;
KEY_Open[4]=0xff;
KEY_Open[5]=0xff;			
/*数据块*/
Read_Car_Address=extract((char*)TFT_license_plate);	// X*4+N(十进制)					
/*初始化卡位置*/					
Car_location=0xF2;							// 卡的位置
Car_location_ASCll[0]='F';		  // 卡的位置ASCll
Car_location_ASCll[1]='2';		  // 卡的位置ASCll
					
					
/***************************************************************/
Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
参数：	  速度     码盘
Car_Track(Go_Speed);									    // 主车循迹
参数：      速度 
Full_STOP();												// 主车停车
参数：  无
Full_Right(wheel_Speed);                  					// 主车右转
参数：       速度值
Full_Left(wheel_Speed);                   					// 主车左转
参数：       速度值 
Car_Back(Go_Speed, Go_Temp);						 		// 主车后退	
参数：	  速度     码盘
MP_Tracking(Go_Speed, Go_Temp);								// 码盘循迹
参数：	  速度     码盘
Car_L45(90, 480);		 									// 左旋转 45度						
	
Car_R45(90, 480);											// 右旋转 45度						

Full_RL_little(1,90);										// 左微调

Full_RL_little(2,90);										// 右微调
/***************************************************************/			
定时器使用说明
TIM1 ->
TIM2 -> ＨＨＨＨＨＨＨＨＨＨＨＨＨＨＨ任务版操作
TIM3 -> *红绿灯识别超时判断
TIM4 -> *任务板数码管扫描   ＨＨＨＨＨＨＨＨＨＨＨＨＨＨＨZigbee等待接收处理
TIM5 ->	ＨＨＨＨＨＨＨＨＨＨＨＨＨＨＨ开启WIFI识别结果接收
TIM6 -> 超声波计时（固定）
TIM7 -> CAN总线检测（固定）
TIM8 ->
TIM9 -> 路况检测（固定）
TIM10 -> 串行数据通讯时间帧（固定）
TIM11 ->
TIM12 ->
TIM13 ->
TIM14 ->

串口使用说明
USART1 -> RFID通信（固定）
USART2 -> A72通信（固定）
USART3 ->
UART4  -> A72通信（固定）
UART5  ->
USART6 -> SYN7318通信（固定）

中断使用说明
TIM3 -> 超时检测中断（根据需要修改）
TIM4 -> 数码管动态扫描中断（根据任务板）
TIM6 -> 超声波计时中断（固定）
TIM7 -> CAN总线检测中断（固定）
TIM9 -> 路况检测中断（固定）
TIM10 -> 串行数据通讯时间帧中断（固定）

EXTI4 -> 超声接收中断(超声接收根据引脚位置开启不同中断线)
EXTI15 -> 超声接收中断(超声接收根据引脚位置开启不同中断线)

USART1 ->串口1接收中断（RFID）
USART2 ->串口2接收中断（A72）
USART4 ->串口4接收中断（A72）
USART6 ->串口6接收中断（SYN7318）

CAN1_RX0 -> CAN总线接收中断

ADC使用说明
ADC1 -> 电池电量检测

中断优先级（第0组 16响应优先级）
0 -> USART2  串口2接收中断（A72）
1 -> USART1  串口1接收中断（RFID）
2 -> UART4  串口4接收中断（A72）
3 -> TIM3  超时检测中断（根据需要修改）
4 -> TIM4  数码管动态扫描中断（根据任务板）
5 -> TIM9  路况检测中断（固定）
6 -> TIM10  串行数据通讯时间帧中断（固定）
7 -> EXTI_15/EXTI_4  超声接收中断(超声接收根据引脚位置开启不同中断线)
8 -> TIM6  超声波计时中断（固定）
9 -> USART6  串口6接收中断（SYN7318）
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 
16 -> 

/**************************************************************
标准任务板				   _________	
				PB9<-RST--|  O   O  |--BEEP->PC13
	  	     PC6<-RL_RXD--|  O   O  |--RI_TXD->PF11
			 PC7<-BL_TXD--|  O   O  |--R_OUT->PG8
		  	    PB15<-OE--|  O   O  |--ADDR->PG15
			 PH10<-LED_L--|  O   O  |--SCL->PB6
			 PH11<-LED_R--|  O   O  |--SDA->PB7
			   PB4<-INT0--|  O   O  |--+5V
			   PA15<-INC--|  O   O  |--GND
                          |---------|

***************************************************************/

RFID读写卡说明（Mifare S50 RFID）
容量：8Kb
16个扇区  64个地址块  每个块存储16个字节 每个扇区独立的密码访问
--------------------------------------------------|
	     |块0|	扇区0 块0 不可更改	  |数据块| 0  |
  扇区0  |块1|					      |数据块| 1  |
         |块2|				    	  |数据块| 2  |
	     |块3|	密码A 控制块 密码B    |控制块| 3  |
--------------------------------------------------|
	     |块0|					      |数据块| 4  |
  扇区1  |块1|					      |数据块| 5  |
         |块2|				    	  |数据块| 6  |
	     |块3|	密码A 控制块 密码B    |控制块| 7  |
--------------------------------------------------|
。。。。。。。。。。。。。。。。。。。。。。。。。|
--------------------------------------------------|
         |块0|					      |数据块| 60 |
  扇区15 |块1|					      |数据块| 61 |
         |块2|				    	  |数据块| 62 |
	     |块3|	密码A 控制块 密码B    |控制块| 63 |
--------------------------------------------------|
RFID控制块内容：
0xff,0xff,0xff,0xff,0xff,0xff
密码A（默认密码）
0xff,0x07,0x80,0x69,0xff
存取控制 
0xff,0xff,0xff,0xff,0xff
密码B	 						
（更改密码需验证密钥后，更改需要修改的扇区块3）
/***************************************************************/
	接收WIFI/Zigbee信息处理结构：
	（检测WIFI/Zigbee接收的标志位）
			判断接收到相应的数据
				1.	关闭定时器
				2.	判断是否启动全自动
				3.	清除定时器标志位
				4.	清除成功标志位
	（清除WIFI/Zigbee接收的标志位）
	
/***************************************************************/	 
#if 0	
/*2021江苏-新*/
			switch (make_Yes)
      {
      	case 0x01:
				{
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启					
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启		
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(GarageA_To1, 8);				//车库下降第一层
					Send_ZigbeeData_To_Fifo(GarageA_To1, 8);				//车库下降第一层
					
 					Car_Go(Go_Speed, Go_Temp+330);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					uploading_flat_computer(0xB0);									// 发送开始TFTA					
					uploading_flat_computer(0xB0);									// 发送开始TFTA					
					uploading_flat_computer(0xB0);									// 发送开始TFTA					
//					Timeout_detection(3,0xA1,0x02);									// TFTA(图形)30s超时检测						
					Timeout_detection(15,0xA1,0x02);								// TFTA(车牌)30s超时检测

					break;
				}
				case 0x02:
				{
						/*密钥*/
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;	
//					/*数据块*/
//					Read_Car_Address=(Static_marker_1[0]+1)*4+(Static_marker_1[1]+1);	// X*4+N(十进制)
//					Read_Car_Address=(Static_marker_1[0]+1)*4+Static_marker_1[1];	// X*4+N(十进制)

					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Back(30, 350);						 						   		// 主车后退
					Card_Temp=Card_SIX(2285);
					if(Card_Temp)
					{
						Car_location=0xB6;							//卡的位置
						Car_location_ASCll[0]='B';			//卡的位置ASCll
						Car_location_ASCll[1]='6';			//卡的位置ASCll										
					}
					Distance_Data=Stadiometry();																	// 测距
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					//Timeout_detection(3,0xA2,0x03);			
					Timeout_detection(10,0xA2,0x03);								// 二维码A10s超时检测								
					break;
				}
				case 0x03:
				{				
					if(Card_Temp)
					{
						Car_Back(30, 300);						 						  	// 主车后退
						RFID_detection_motion();				 							// 自动读卡								
						Car_Go(30, 300);	      			    						// 主车前进	
					}
					
					Full_Right(wheel_Speed);                  			// 主车右转		
					Car_Back(30, 300);						 						   		// 主车后退
	
					switch(Card_One(1837))
					{
						case 0x01:
						{
							Car_location=0xB5;							//卡的位置
							Car_location_ASCll[0]='B';			//卡的位置ASCll
							Car_location_ASCll[1]='5';			//卡的位置ASCll										
							break;
						}
						case 0x02:
						{
							Car_location=0xB4;							//卡的位置
							Car_location_ASCll[0]='B';			//卡的位置ASCll
							Car_location_ASCll[1]='4';			//卡的位置ASCll										
							break;
						}
					}
					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					uploading_flat_computer(0xB1);									// 发送开始TFTB		
					uploading_flat_computer(0xB1);									// 发送开始TFTB		
					uploading_flat_computer(0xB1);									// 发送开始TFTB		
					//Timeout_detection(3,0xA3,0x04);								  // TFTA(图形)30s超时检测
					Timeout_detection(30,0xA3,0x04);								  // TFTA(图形)30s超时检测
					break;
				}
				case 0x04:
				{	
					Full_Right(wheel_Speed);                  			// 主车右转		
					Car_Back(30, 300);						 						   		// 主车后退
	
					switch(Card_One(2285))
					{
						case 0x01:
						{
							Car_location=0xB5;							//卡的位置
							Car_location_ASCll[0]='C';			//卡的位置ASCll
							Car_location_ASCll[1]='4';			//卡的位置ASCll										
							break;
						}
						case 0x02:
						{
							Car_location=0xB4;							//卡的位置
							Car_location_ASCll[0]='D';			//卡的位置ASCll
							Car_location_ASCll[1]='4';			//卡的位置ASCll										
							break;
						}
					}		

					char A_temp[6]={'B','5','0','0','0'};
					if((Car_location_ASCll[0]||Car_location_ASCll[1])!=0)//若没读到卡
					{
							A_temp[0]=Car_location_ASCll[0];
							A_temp[1]=Car_location_ASCll[1];
					}
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进
					Full_Left(wheel_Speed);                   			// 主车左转
					
					Car_L45(90, 400);											// 左旋转 45度
					Rotate_show_Inf(A_temp,Distance_Data/100+'0',Distance_Data%100/10+'0');				// 立体显示标志物显示车牌数据
					Rotate_show_Inf(A_temp,Distance_Data/100+'0',Distance_Data%100/10+'0');				// 立体显示标志物显示车牌数据
					Car_R45(90, 400);											// 右旋转 45度
					Full_Right(wheel_Speed);                  			// 主车右转		

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转
					Gate_Show_Zigbee((char*)TFT_license_plate);                     // 道闸系统标志物显示车牌					
					Gate_Show_Zigbee((char*)TFT_license_plate);                     // 道闸系统标志物显示车牌					
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      		// 道闸 -> 开启
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      		// 道闸 -> 开启		
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					SYN_Extern();																		// 语音识别	
					Compress_data((char*)RXRFID);					
					Send_Wifi(0xB7,Output[0],Output[1],Output[2]);
					Send_Wifi(0xB8,Output[3],0x00,0x00);
					
					Timeout_detection(5,0xA4,0xCC);								// 交通灯15s超时检测
					break;
				}
				case 0xCC:
				{				
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车

					Full_Left(wheel_Speed);                   			// 主车左转
					
					ETC_detection();		//ETC					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					uploading_flat_computer(0xB2);								    // 发送交通灯A识别
					uploading_flat_computer(0xB2);								    // 发送交通灯A识别
					uploading_flat_computer(0xB2);								    // 发送交通灯A识别
					//Timeout_detection(4,0xA4,0x05);								  // TFTA(图形)30s超时检测
					Timeout_detection(15,0xAC,0x05);								// 交通灯15s超时检测
					break;
				}		
				case 0x05:
				{					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					uint8_t n_Fifo=Dimming(Static_marker_1[2]);								// 调光
					//B2出发  倒车入库
					if(n_Fifo%3==0)//B7
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测						
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						MP_Tracking(30,1000);												 		// 码盘循迹（防止中途有卡）
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测	
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
	
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1100);						 						   		// 主车后退
					}
					else if(n_Fifo%3==1)//B1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1000);						 						   		// 主车后退
					}
					else if(n_Fifo%3==2)//D1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	

						Car_Track(Go_Speed);									    			// 主车循迹
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						Full_Right(wheel_Speed);                  			// 主车右转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						
						Car_Back(30, 1000);						 						   		// 主车后退						
					}				
					Garage((Graph[1]+Graph[2])%4+1);
					
					Digital_Display(0,9);
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					SYN_Play("运行完成");
					
 					make_Yes=0xA6;																	// 最后要赋值
					Operation_Flag=0xA6;														// 最后要赋值
					break;
				}
			}
#endif




















/***************************************************************/
			switch(make_Yes) 21江苏
		{
				case 0x01:
				{
					Send_Debug_Info((uint8_t*)"Start->\n",8);
					SYN_Play("开始启动");				

					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					Car_Go(Go_Speed, Go_Temp+350);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					Car_R45(90, 480);																// 右旋转(45)度	
					
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					
					Timeout_detection(20,0xA1,0x02);								// TFTA(车牌)20s超时检测
					break;	
				}
				case 0x02:
				{
					Car_L45(90, 480);																// 左旋转(45)度	

					Full_Left(wheel_Speed);                   			// 主车左转
					
					Road_Test_two_stage(1850);								   		// 两段中间点有路障检测
			
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);            			// 发送开始二维码A识别		

					Timeout_detection(10,0xA2,0x03);								// 二维码A10s超时检测					
					break;				
				}
				case 0x03:
				{
					/*测距*/
					Distance_temp=Stadiometry();																	// 测距	
					/*密钥*/
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;	
					/*数据块*/
					Read_Car_Address=Static_marker_1[0]*4+Static_marker_1[1];	// X*4+N(十进制)
					
					Track_7=Get_Host_UpTrack(TRACK_Q7);							// 检测B6的卡
					if(Track_7 == 0x3E | Track_7 == 0x1E | Track_7 == 0x3C | Track_7 == 0x1c)
					{	
						RFID_detection_motion();											// RFID微动检测
						Car_location=0xB6;
						Car_location_ASCll[0]='B';
						Car_location_ASCll[1]='6';						
					}	
					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转	
					
					switch(Road_Test_Read_Out(1400))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xB5;
							Car_location_ASCll[0]='B';
							Car_location_ASCll[1]='5';
							break;
						}
						case 0x02:
						{
							Car_location=0xB4;
							Car_location_ASCll[0]='B';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转
					
					Car_Go(Go_Speed, 60);      			    						// 主车前进	

					uploading_flat_computer(0xB1);									// 发送开始TFTB
					uploading_flat_computer(0xB1);									// 发送开始TFTB
					
					Timeout_detection(30,0xA3,0x04);								// TFTB(图形)30s超时检测
					break;
				}
				case 0x04:
				{
					Car_Back(Go_Speed, 60); 	    			    				// 主车后退
				/*（Graph[0]：矩形 ）（Graph[1]：圆形 ）（Graph[2]：三角）（Graph[3]: 菱形）（Graph[4]：五角星）*/
					TFT_Test_Zigbee('B',0x40,0xA0+Graph[0],0xD0+Graph[3],0xE0+Graph[4]);			//TFTB显示		
					
					Send_Zigbee_Data(0x05,(Graph[1]+Graph[2])%4+1,0x00,0x00);					// 发送副车车库层数
					Send_Zigbee_Data(0x05,(Graph[1]+Graph[2])%4+1,0x00,0x00);					// 发送副车车库层数
					
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(100);																	// 连续转弯要加延时
					Full_Left(wheel_Speed);                   			// 主车左转
					
					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xC4;
							Car_location_ASCll[0]='C';
							Car_location_ASCll[1]='4';
							break;
						}
						case 0x02:
						{
							Car_location=0xD4;
							Car_location_ASCll[0]='D';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}	
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_L45(90, 480);																// 左旋转(45)度	

					
					/*LZW算法-烽火台开启码*/
					
					LZW_Coding(RXRFID);	//LZW编码
					Send_Zigbee_Data(0X0E,LZW_Code_Stream[0],LZW_Code_Stream[1],LZW_Code_Stream[2]);					// 发送启动副车
					Send_Zigbee_Data(0X0F,LZW_Code_Stream[3],LZW_Code_Stream[4],LZW_Code_Stream[5]);					// 发送启动副车

					
					
					/*立体显示FID卡位置+距离*/
					stereo_display[0]=Car_location_ASCll[0];
					stereo_display[1]=Car_location_ASCll[1];
					stereo_display[2]=0;
					stereo_display[3]=0;
					stereo_display[4]=0;
					stereo_display[5]=0;		
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示										
					
					Car_R45(90, 480);																// 右旋转(45)度	
					Full_Right(wheel_Speed);                  			// 主车右转	

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转

					Gate_Show_Zigbee((char*)TFT_license_plate);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					Gate_Show_Zigbee((char*)TFT_license_plate);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					SYN_Extern();																		// 语音识别
					
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车					
					SYN_Play("小伙伴启动");
					
					Full_Left(wheel_Speed);                   			// 主车左转
					ETC_detection();																// ETC检测
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
				
					/*交通灯识别*/
					uploading_flat_computer(0xB2);									// 发送交通灯识别
					uploading_flat_computer(0xB2);								  // 发送交通灯识别	
					
					Timeout_detection(15,0xA4,0x05);								// 交通灯15s超时检测				
					break;
				}
				case 0x05:
				{
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					n_Fifo=Dimming(Static_marker_1[2]%4+1);  				// 调光并获取档位	
					
					//B2出发  倒车入库
					if(n_Fifo%3==0)//B7
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测						
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						MP_Tracking(30,1000);												 		// 码盘循迹（防止中途有卡）
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测	
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
	
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1000);						 						   		// 主车后退
					}
					else if(n_Fifo%3==1)//B1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1000);						 						   		// 主车后退
					}
					else if(n_Fifo%3==2)//D1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	

						Car_Track(Go_Speed);									    			// 主车循迹
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						Full_Right(wheel_Speed);                  			// 主车右转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						
						Car_Back(30, 1000);						 						   		// 主车后退						
					}
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					//Digital_tube_dynamic_display(9,1);							// 数码管显示

					SYN_Play("运行完成");
 					make_Yes=0xA5;																	// 最后要赋值
					break;
				}
			}
	
	
				switch(make_Yes)
			{
				case 0x01:
				{	
					Send_Debug_Info((uint8_t*)"Start->\n",8);
					SYN_Play("开始启动");	

					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭				

					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转			
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Car_Track(Go_Speed);									    			// 主车循迹

					/*测距*/
					Stadiometry();																	// 测距
					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					/*二维码A*/
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);            			// 发送开始二维码A识别
					
//					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					//发送启动副车
//					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					//发送启动副车
//					SYN_Play("小伙伴启动");
					
//					TIM3_OverTime(0x05);														// 超时启动检测				
				
					make_Yes=0xA1;														 			//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x02:
				{
					
					Full_Left(wheel_Speed);                   			// 主车左转					
					
					/*密钥*/
					KEY_Open[0]=Vice_car_QR[0];
					KEY_Open[1]=Vice_car_QR[1];
					KEY_Open[2]=Vice_car_QR[2];
					KEY_Open[3]=Vice_car_QR[3];
					KEY_Open[4]=Vice_car_QR[4];
					KEY_Open[5]=Vice_car_QR[5];				
					/*RFID有效数据块*/
					RFID_addr=Extract_letter_figure((char*)Vice_car_QR,6,2);
					RFID_addr=(Vice_car_QR[RFID_addr-1]-'0')*4+1;
					Send_Debug(RFID_addr);
		
					Road_Test_Read_Out(1400);												// 路况检测+中途读卡+终点读卡(单段)
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转	

					Send_street_lamp_gear(Dimming(0));              // 调光
										
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Back(30, 300);						 						   		// 主车后退
					MP_Tracking(30,300);												 		// 码盘循迹
					Car_Back(30, 300);						 						   		// 主车后退
					MP_Tracking(30,300);												 		// 码盘循迹					
					Road_Test_Read_Out(1400);												// 路况检测+中途读卡+终点读卡(单段)
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					Send_Zigbee_Data(0x08,ASCLL_conversion(RXRFID[2],RXRFID[3]),
					ASCLL_conversion(RXRFID[4],RXRFID[5]),ASCLL_conversion(RXRFID[6],RXRFID[7]));					//发送自由路径坐标1
					Send_Zigbee_Data(0x09,ASCLL_conversion(RXRFID[8],RXRFID[9]),
					ASCLL_conversion(RXRFID[10],RXRFID[11]),ASCLL_conversion(RXRFID[12],RXRFID[13]));					//发送自由路径坐标1


					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车					
					SYN_Play("小伙伴启动");
					
					uploading_flat_computer(0xB0);									// 发送开始TFTA（图形识别）
					uploading_flat_computer(0xB0);            			// 发送开始TFTA（图形识别）
//					TIM3_OverTime(0x03);														// 图形识别超时检测
					
						make_Yes=0xA2;														 		// 运行结束标志位
						Eliminate_Flag();													 		// 清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x03:
				{
					Full_Left(wheel_Speed);                   			// 主车左转															
					Road_Test_two_stage(1850);											// 路况检测（两段）
					
					uploading_flat_computer(0xB1);									// 发送开始TFTB（车牌识别）
					uploading_flat_computer(0xB1);            			// 发送开始TFTB（车牌识别）
					Car_Go(Go_Speed, 200);      			    					// 主车前进	
					
//					TIM3_OverTime(0x04);														// 车牌识别超时检测			
					
						make_Yes=0xA3;																// 运行结束标志位
						Eliminate_Flag();													 		// 清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x04:
				{
					/*Graph[0]：矩形 Graph[1]：圆形  Graph[2]：三角Graph[3]: 菱形 Graph[4]：五角星*/
					TFT_Test_Zigbee('B',0x40,0xA0+Graph[0],0xB0+Graph[4],0xE0+Graph[1]);
					Car_Go(Go_Speed, Go_Temp-200);      			    			// 主车前进	
					
					Full_Left(wheel_Speed);                   			// 主车左转										

					Car_L45(90, 480);											 					// 左旋转 45度	
					Digital_tube_Infrared_Send(Alarm_Open, 6);      // 烽火台 -> 开启					
					delay_ms(500);
					Digital_tube_Infrared_Send(Alarm_Open, 6);      // 烽火台 -> 开启
					delay_ms(500);					
					Car_R45(90, 480);											 					// 右旋转 45度	
					
					Gate_Show_Zigbee((char*)TFT_license_plate);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);       		// 道闸 -> 开启
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);       		// 道闸 -> 开启					

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进

					Heading_Fifo=SYN_Extern();											// 语音识别
					
					Full_Left(wheel_Speed);                   			// 主车左转					

					/*交通灯识别*/
					uploading_flat_computer(0xB2);									//发送交通灯识别
					uploading_flat_computer(0xB2);								  //发送交通灯识别					
					
//					TIM3_OverTime(0x01);														//交通灯识别超时检测	
					
						make_Yes=0xA4;																// 运行结束标志位
						Eliminate_Flag();													 		// 清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x05:
				{
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进
					
					Car_L45(90, 480);											 					// 左旋转 45度						
					Rotate_show_Inf((char*)TFT_license_plate,0,Heading_Fifo);							//立体显示车牌
					Car_R45(90, 480);											 					// 右旋转 45度	
					
					Full_Right(wheel_Speed);                  			// 主车右转	
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进
					Full_Left(wheel_Speed);                   			// 主车左转					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进
					Full_Left(wheel_Speed);                   			// 主车左转					

					MP_Tracking(30,1000);												 		// 码盘循迹
					delay_ms(200);					
					Car_Back(30, 1000);						 						   		// 主车后退
					delay_ms(200);
					MP_Tracking(30,1000);												 		// 码盘循迹
					delay_ms(200);						
					Car_Back(30, 1000);						 						   		// 主车后退
					delay_ms(200);
					Car_Back(30, 1200);						 						   		// 主车后退
					delay_ms(300);

					/*提取车牌中最大的数*/
					MOV7=Extract_letter_figure((char*)TFT_license_plate,6,2);
					MOV7=Seek_biggest_minimum((char*)TFT_license_plate,MOV7,1);
					MOV7=MOV7%4+1;
					if(MOV7==0||MOV7>4)
					{
						MOV7=2;
					}					
					Garage_Cont_Zigbee('A',MOV7);								 		// 车库上升

					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    		// LED显示标志物计时模式 -> 关闭
					delay_ms(500);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    		// LED显示标志物计时模式 -> 关闭
					delay_ms(500);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    		// LED显示标志物计时模式 -> 关闭
					delay_ms(500);

					SYN_Play("完成");					
						make_Yes=0xA5;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x06:
				{
					
						make_Yes=0xA6;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x07:
				{
					
						make_Yes=0xA7;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x08:
				{
					
						make_Yes=0xA8;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
			}
//2019江苏省赛
			switch(make_Yes)
			{
				case 0x01:
				{	
					Send_Debug_Info((uint8_t*)"Start->\n",8);
					SYN_Play("开始启动");	
					KEY_Open[0]=0xFF;
					KEY_Open[1]=0xFF;
					KEY_Open[2]=0xFF;
					KEY_Open[3]=0xFF;
					KEY_Open[4]=0xFF;
					KEY_Open[5]=0xFF;
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					
					Car_Go(Go_Speed, Go_Temp+350);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, 100);      			    					// 主车前进	
					
					Read_Car_Address=13;															//卡的块地址

					switch(Road_Test_Read_Out(1400))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x02:
						{
							Car_location=0xF4;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}				

					/*语音识别*/
					Car_Go(Go_Speed, 200);      			    			// 主车前进		
					SYN_Extern();																		//语音识别
					
					switch(Road_Test_Read_Out(1400))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xF3;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='3';
							break;
						}
						case 0x02:
						{
							Car_location=0xF2;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='2';
							break;
						}
						default:break;
					}
					Car_Go(Go_Speed, Go_Temp);      			    			  // 主车前进		
					Full_Left(wheel_Speed);                   				// 主车左转

					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xE2;
							Car_location_ASCll[0]='E';
							Car_location_ASCll[1]='2';
							break;
						}
						case 0x02:
						{
							Car_location=0xD2;
							Car_location_ASCll[0]='D';
							Car_location_ASCll[1]='2';
							break;
						}
						default:break;
					}
					
					SYN_Play("卡的位置[=zhi4]");	
					sprintf((char*)Fifo,"%X\n",Car_location);					
					Send_Debug_Info(Fifo,3);
					SYN_Play((char*)Fifo);
									
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					Full_Right(wheel_Speed);                  			// 主车右转					
					
					/*TFT_A*/
					uploading_flat_computer(0xB0);									//发送开始TFTA
//					uploading_flat_computer(0xB0);            		//发送开始TFTA
				
					TIM3_OverTime(0x04);														//车牌识别超时检测			
					
					make_Yes=0xA1;														 //运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x02:
				{					
					TFT_Test_Zigbee('A',0x40,0xA0+Graph[4],0xB0+Graph[3],0xE0+Graph[1]);
					
					Full_Left(wheel_Speed);                   			// 主车左转

					/*交通灯识别*/
					uploading_flat_computer(0xB2);									//发送交通灯识别
					uploading_flat_computer(0xB2);								  //发送交通灯识别					
					
					TIM3_OverTime(0x01);														//交通灯识别超时检测	
					make_Yes=0xA2;														    //运行结束标志位
					Eliminate_Flag();													    //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x03:
				{
					Car_Track(Go_Speed);									    			// 主车循迹
					
					/*测距*/
					Stadiometry();															//测距
					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					/*二维码A*/
					uploading_flat_computer(0xB4);									//发送开始二维码A识别
					uploading_flat_computer(0xB4);            			//发送开始二维码A识别
					TIM3_OverTime(0x02);														//二维码识别超时检测					
					
						make_Yes=0xA3;																//运行结束标志位
						Eliminate_Flag();													 		//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x04:
				{
					Full_Left(wheel_Speed);                   			// 主车左转					
						MP_Tracking(Go_Speed, 950);								    // 码盘循迹		
						/*二维码B*/
						uploading_flat_computer(0xB5);								//发送开始二维码B识别
						uploading_flat_computer(0xB5);            		//发送开始二维码B识别					
						TIM3_OverTime(0x02);													//二维码识别超时检测
					
						make_Yes=0xA4;																//运行结束标志位
						Eliminate_Flag();													 		//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x05:
				{
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					Full_Right(wheel_Speed);                  			// 主车右转					
	
					/*光照档位调整*/
					Char_Size=Extract_letter_figure((char*)RXRFID,16,2);//计算光照档位
					d2=Seek_biggest_minimum((char*)RXRFID,Char_Size,1);
					d1=Seek_biggest_minimum((char*)RXRFID,Char_Size,0);
					
					Dimming((d1^d2)%4+1);																			//调光
					
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_L45(90, 400);											 					// 左旋转 45度		
					
					/*立体显示车牌+RFID卡位置*/
					Rotate_show_Inf((char*)TFT_license_plate,Car_location_ASCll[0],Car_location_ASCll[1]);							//立体显示车牌
					Car_R45(90, 400);											 					// 右旋转 45度						
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					Full_Left(wheel_Speed);                   			// 主车左转

					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					//发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					//发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					//发送启动副车
					SYN_Play("发送成功");
					SYN_Play("小伙伴启动");
					TIM3_OverTime(0x05);													 //副车启动超时检测（包含清除wifi标志位）					
						make_Yes=0xA5;															 //运行结束标志位
						Eliminate_Flag();													   //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x06:
				{
						MP_Tracking(30,1000);												 //码盘循迹
						delay_ms(200);					
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						MP_Tracking(30,1000);												 //码盘循迹
						delay_ms(200);						
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						Car_Back(30, 1200);						 						   //主车后退
						delay_ms(300);
					
						Digital_tube_dynamic_display(Graph[4]+Graph[3]+Graph[2]+Graph[0]*2+3*Graph[1],1);					// 数码管显示开启	
					
						/*无线充电开启*/						
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);      //无线充电标志物开启
					  Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);     // LED显示标志物计时模式 -> 关闭

						SYN_Play("完成");
					
						make_Yes=0xA6;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x07:
				{
					
						make_Yes=0xA7;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x08:
				{
					
						make_Yes=0xA8;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
			}

#if 0	2019省赛
			switch(make_Yes)
			{
				case 0x01:
				{	
					Read_Car_Address=6;
					SYN_Play("开始启动");
					delay_ms(100);				
				
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					delay_ms(100);
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					delay_ms(100);					
					
					Car_Go(Go_Speed, Go_Temp+350);      					  // 主车前进
					delay_ms(50);					
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(50);					
				
					/*交通灯识别*/
					delay_ms(50);
					Send_ZigbeeData_To_Fifo(TrafficA_Open, 8);   	  // 智能交通灯进入识别模式
					delay_ms(100);
					uploading_flat_computer(0xB2);									//发送交通灯识别
					delay_ms(100);
					uploading_flat_computer(0xB2);								  //发送交通灯识别
					delay_ms(100);
		
					TIM3_OverTime(0x01);															//交通灯识别超时检测（包含清除wifi标志位）
		
					make_Yes=0xA1;														 			//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x02:
				{
					delay_ms(50);					
					Car_Track(Go_Speed);									     			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, 450);      			    					// 主车前进										
					delay_ms(50);							
					Car_R45(90, 480);											 					// 右旋转 45度						
					delay_ms(200);					
					uploading_flat_computer(0xB4);									//发送开始二维码A识别
					delay_ms(100);
					uploading_flat_computer(0xB4);            			//发送开始二维码A识别
					delay_ms(100);	

					TIM3_OverTime(0x02);														//二维码识别超时检测					
					make_Yes=0xA2;														 			//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x03:
				{
					delay_ms(50);							
					Car_L45(90, 480);											 					// 左旋转 45度						
					delay_ms(200);	
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);

					/*图形识别预留*/
					delay_ms(200);					
					uploading_flat_computer(0xB0);									//发送开始TFTA
					delay_ms(100);
//					uploading_flat_computer(0xB0);            			//发送开始TFTA
					delay_ms(100);	
	
					TIM3_OverTime(0x04);														//车牌识别超时检测										
					
					make_Yes=0xA3;																	//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x04:
				{
					SYN_Play("识别成功");
					delay_ms(50);
					Full_Right(wheel_Speed);                  			// 主车右转					
					delay_ms(50);					
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);		
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(50);

					/*超声波测距*/
					delay_ms(200);
					MP_Tracking(30, 450);														//码盘循迹				
					delay_ms(200);
					Car_Back(30, 450);						 									//主车后退	
					delay_ms(200);
					MP_Tracking(30, 450);														//码盘循迹				
					delay_ms(200);
					Car_Back(30, 200);						 									//主车后退	
					delay_ms(200);
					
					Car_Back(Go_Speed, Go_Temp);				  					//主车后退	
					delay_ms(200);					
					for(int i2=0;i2<4;i2++)
					{	
						DIS=Full_Measure();
						if(DIS>0)
						{
							SYN_Play("测距成功");	
								break;								
						}
							else
							{
								SYN_Play("测距失败，再来一次");
								delay_ms(200);								
							}				
					}	
					delay_ms(200);
					voice(DIS,"毫米");
					delay_ms(200);
					sprintf((char*)Fifo,"D:%dmm\n",DIS);
					Send_Debug_Info(Fifo,8);								
					delay_ms(50);													
					Car_Go(Go_Speed, Go_Temp);      			  				// 主车前进
					delay_ms(50);													

					uploading_flat_computer(0xB5);									//发送开始二维码B识别
					delay_ms(100);
					uploading_flat_computer(0xB5);            			//发送开始二维码B识别
					delay_ms(100);	
					
					TIM3_OverTime(0x02);														//二维码识别超时检测										
					
					make_Yes=0xA4;																	//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x05:
				{
					Car_Back(Go_Speed, 200);				  					//主车后退	
					
					delay_ms(50);
					Full_Right(wheel_Speed);                  			// 主车右转					
					delay_ms(200);		
					Full_Right(wheel_Speed);                  			// 主车右转					
					delay_ms(50);	

					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xC4;
							Car_location_ASCll[0]='C';
							Car_location_ASCll[1]='4';
							break;
						}
						case 0x02:
						{
							Car_location=0xD4;
							Car_location_ASCll[0]='D';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);
					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xE4;
							Car_location_ASCll[0]='E';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(50);							
					Car_L45(90, 480);											 					// 左旋转 45度						
					delay_ms(200);	

					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);						
					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);						
					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);	
	
					delay_ms(50);							
					Car_R45(90, 480);											 					// 右旋转 45度						
					delay_ms(200);
					
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
					delay_ms(500);
					delay_ms(500);

					delay_ms(50);					
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);
					
					/*语音识别*/
					delay_ms(300);
					SYN_Extern();									   			            // 语音识别
					delay_ms(300); 
					
					delay_ms(50);
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(50);				
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);
					

					Send_Zigbee_Data(0x09,ASCLL_conversion(RXRFID[4],RXRFID[5]),
					ASCLL_conversion(RXRFID[7],RXRFID[8]),ASCLL_conversion(RXRFID[10],RXRFID[11]));//发送自由路径坐标
					delay_ms(200);
					Send_Zigbee_Data(0x09,ASCLL_conversion(RXRFID[4],RXRFID[5]),
					ASCLL_conversion(RXRFID[7],RXRFID[8]),ASCLL_conversion(RXRFID[10],RXRFID[11]));//发送自由路径坐标
					delay_ms(200);
					Send_Zigbee_Data(0x09,ASCLL_conversion(RXRFID[4],RXRFID[5]),
					ASCLL_conversion(RXRFID[7],RXRFID[8]),ASCLL_conversion(RXRFID[10],RXRFID[11]));//发送自由路径坐标
					delay_ms(200);
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);	
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);						
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);												
					SYN_Play("小伙伴启动");
					
					
					make_Yes=0x06;														//运行结束标志位
					Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x06:
				{
					delay_ms(50);					
					Car_Track(Go_Speed);									    			// 主车循迹
					delay_ms(50);					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
					delay_ms(50);					
	
					delay_ms(200);		
					Full_Right(wheel_Speed);                  			// 主车右转					
					delay_ms(50);	
					/*光照档位调整*/
					for(int CT=0;CT<4;CT++)													// 如果没有检测到就重新检测3次
					{
						delay_ms(100);
						MOV_P=Light_djustment(0);         						//光照探测
						delay_ms(50);							

						if(MOV_P>0)
						{						
							delay_ms(50);
							sprintf((char*)Fifo,"L:%dd\n",MOV_P);
							Send_Debug_Info(Fifo,8);								
							delay_ms(100);															
							break;
						}
					}
					delay_ms(200);		
					Full_Right(wheel_Speed);                  			// 主车右转					
					delay_ms(50);			

					MP_Tracking(30,1000);												 //码盘循迹
					delay_ms(200);					
					Car_Back(30, 1000);						 						   //主车后退
					delay_ms(200);
					MP_Tracking(30,1000);												 //码盘循迹
					delay_ms(200);						
					Car_Back(30, 1000);						 						   //主车后退
					delay_ms(200);
//					Car_Back(30, 1200);						 						   //主车后退
					Car_Back(30, 850);						 						   //主车后退				
					delay_ms(300);			

					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
					delay_ms(300);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
					delay_ms(300);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
					delay_ms(300);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
					delay_ms(300);

					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        //无线充电标志物开启
					delay_ms(300);
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        //无线充电标志物开启
					delay_ms(300);					

					SYN_Play("完成");
					
					make_Yes=0xA6;														//运行结束标志位
					Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x07:
				{
					
						make_Yes=0xA7;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x08:
				{
					
						make_Yes=0xA8;														//运行结束标志位
						Eliminate_Flag();													 //清除Wifi和Zigbee接收标志位
					break;
				}
			}

#endif
#if 0 2019山东省赛
			switch(make_Yes)
			{
				case 0x01:
				{	
					SYN_Play("开始启动");
					delay_ms(100);				
				
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					delay_ms(100);
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					delay_ms(100);
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        //无线充电标志物开启
					delay_ms(300);
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        //无线充电标志物开启
					delay_ms(300);					
					/*B1-B3*/
					Car_Track(Go_Speed);									    			// 主车循迹
					Full_STOP();												      			// 主车停车					
					delay_ms(50);
					Car_Go(Go_Speed, 100);      			    			    // 主车前进				
					delay_ms(50);

					/*路况检测*/
					if(Road_Test_STOP(1400)==1)
					{
						delay_ms(500);
						Detected=1;																		// 地形是否检测到标志位
						Car_Go(Go_Speed, 850);      			    				// 主车前进	
					}	
					else//没有检测到地形标志物
					{
						delay_ms(50);					
						Full_STOP();												      	 	// 主车停车					
						delay_ms(100);
						Car_Back(Go_Speed, 850);						 					// 主车后退							
					}					
	
					//启动图形识别
					delay_ms(500);
					delay_ms(500);//（图形识别预留）
					delay_ms(500);
					delay_ms(500);					
					SYN_Play("识别成功");
					
					make_Yes=0x02;														 			//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x02:
				{
					/*B3-B4*/	
					delay_ms(200);					
					Car_Go(Go_Speed, 500);      			    					// 主车前进										
					delay_ms(50);					
					Car_Track(Go_Speed);									     			// 主车循迹
					Full_STOP();												       			// 主车停车					
					delay_ms(50);					
					Car_Go(Go_Speed, 450);      			    					// 主车前进										
					delay_ms(50);							
					Car_R45(90, 480);											 					// 右旋转 45度						
					delay_ms(50);
					Car_R45(90, 480);																// 右旋转 45度						
					delay_ms(50);	
					
					/*光照探测调整*/
					delay_ms(50);					
					Car_Go(Go_Speed, 200);      			    					// 主车前进										
					delay_ms(50);							
					for(int CT=0;CT<4;CT++)													// 如果没有检测到就重新检测3次
					{
						delay_ms(100);
						MOV_P=Light_djustment(0);         						//光照探测
						delay_ms(50);							

						if(MOV_P>0)
						{						
							delay_ms(50);
							sprintf((char*)Fifo,"L:%dd\n",MOV_P);
							Send_Debug_Info(Fifo,8);								
							delay_ms(100);															
							break;
						}
					}
					delay_ms(50);
					Car_Back(Go_Speed, 200);						 						// 主车后退	
					delay_ms(50);
					Car_R45(90, 400);											 					// 右旋转 45度						
					delay_ms(50);
					Car_R45(90, 400);																// 右旋转 45度							
					delay_ms(200);
					
					Location_of_QR_code(MOV_P);											//去二维码的位置
					
					delay_ms(200);					
					uploading_flat_computer(0xB4);									//发送开始二维码识别
					delay_ms(100);
					uploading_flat_computer(0xB4);            			//发送开始二维码识别
					delay_ms(100);	

					TIM3_OverTime(0x02);														//二维码识别超时检测
					
					make_Yes=0xA2;														 			//运行结束标志位
					Eliminate_Flag();													 			//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x03:
				{		
					switch(MOV_P)
					{
						case 1://B3
						{
							delay_ms(200);					
							Car_Go(Go_Speed, 500);      			    			// 主车前进										
							delay_ms(50);					
							Car_Track(Go_Speed);									     	// 主车循迹
							Full_STOP();												       	// 主车停车					
							delay_ms(50);					
							Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进										
							delay_ms(50);
							if(Detected==1)															//前面没有检测到路障（可能这里有路障）
							{
									Car_R45(90, 480);											 	// 右旋转 45度						
									delay_ms(50);
7			
									delay_ms(200);
							}
							else
							{
									delay_ms(50);											
									Full_Right(wheel_Speed);                // 主车右转		
									delay_ms(50);	
									Car_Back(30, 200);						 				  //主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);
									Car_Back(30, 200);						 				  //主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);	
									Car_Back(30, 200);						 				  //主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);					
							}							
							switch(Road_Test_Read_Out(1850))					  //路况检测+中途读卡+终点读卡(单段)
							{
								case 0x02:
								{
									Car_location=0xD2;
									Car_location_ASCll[0]='D';
									Car_location_ASCll[1]='2';
									break;
								}
								default:break;
							}
							delay_ms(50);
							Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
							delay_ms(50);
							break;
						}
						case 2://C2
						{
							if(Destination_Read_Car()==1)								//寻终点的卡的循迹	
							{
											Car_location=0xD2;
											Car_location_ASCll[0]='D';
											Car_location_ASCll[1]='2';
							}					
							delay_ms(50);
							Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
							delay_ms(50);							
							break;
						}
						case 3://C4
						{
							
							delay_ms(50);					
							Car_Track(Go_Speed);									      // 主车循迹
							Full_STOP();												        // 主车停车					
							delay_ms(50);					
							Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进										
							delay_ms(50);
				
							if(Detected==1)
							{
								Car_R45(90, 480);											 		// 右旋转 45度						
								delay_ms(50);
								Car_R45(90, 480);													// 右旋转 45度						
								delay_ms(200);
								Car_Back(30, 100);						 						//主车后退	
								delay_ms(200);
								MP_Tracking(30, 100);											//码盘循迹				
								delay_ms(200);
								Car_Back(30, 100);						 						//主车后退	
								delay_ms(200);
								MP_Tracking(30, 100);											//码盘循迹						
								delay_ms(200);
								Car_Back(30, 100);						 						//主车后退	
							}
							else
							{
								delay_ms(50);											
								Full_Right(wheel_Speed);                   // 主车右转		
								delay_ms(50);							
							}
							/*路况检测*/
							if(Road_Test_STOP(1400)==1)
							{
								delay_ms(500);
								Car_Go(Go_Speed, 1200);      			    			// 主车前进
								delay_ms(500);								
								Full_STOP();																// 主车停车										
								delay_ms(50);
								Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
								delay_ms(50);									
							}
							else
							{
								delay_ms(50);
								Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
								delay_ms(50);								
							}


							if(Detected==1)															  //前面没有检测到路障（可能这里有路障）
							{
									Car_R45(90, 480);											 		// 右旋转 45度						
									delay_ms(50);
									Car_R45(90, 480);													// 右旋转 45度						
									delay_ms(200);
							}
							else
							{
									delay_ms(50);											
									Full_Right(wheel_Speed);                  // 主车右转		
									delay_ms(50);	
									Car_Back(30, 200);						 						//主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);
									Car_Back(30, 200);						 						//主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);	
									Car_Back(30, 200);						 					 //主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);					
							}
							/*路况检测*/
							switch(Road_Test_Read_Out(1850))						 //路况检测+中途读卡+终点读卡(单段)
							{
								case 0x02:
								{
									Car_location=0xD2;
									Car_location_ASCll[0]='D';
									Car_location_ASCll[1]='2';
									break;
								}
								default:break;
							}
							delay_ms(50);
							Car_Go(Go_Speed, Go_Temp);      			    	 // 主车前进				
							delay_ms(50);															
							break;
						}
						case 4://D3
						{
							delay_ms(50);
							Car_Track(Go_Speed);									       // 主车循迹
							Full_STOP();																 // 主车停车										
							delay_ms(50);
							Car_Go(Go_Speed, Go_Temp);      			    	 // 主车前进				
							delay_ms(50);	
							delay_ms(50);											
							Full_Right(wheel_Speed);                     // 主车右转		
							delay_ms(50);					
							Car_Track(Go_Speed);									       // 主车循迹
							Full_STOP();												         // 主车停车					
							delay_ms(50);					
							Car_Go(Go_Speed, Go_Temp);      			    	 // 主车前进										
							delay_ms(50);
				
							if(Detected==1)
							{
								Car_R45(90, 480);											 		 // 右旋转 45度						
								delay_ms(50);
								Car_R45(90, 480);													 // 右旋转 45度						
								delay_ms(200);
								Car_Back(30, 100);						 						 //主车后退	
								delay_ms(200);
								MP_Tracking(30, 100);											 //码盘循迹				
								delay_ms(200);
								Car_Back(30, 100);						 						 //主车后退	
								delay_ms(200);
								MP_Tracking(30, 100);											 //码盘循迹						
								delay_ms(200);
								Car_Back(30, 100);						 						 //主车后退	
							}
							else
							{
								delay_ms(50);											
								Full_Right(wheel_Speed);                   // 主车右转		
								delay_ms(50);							
							}
							/*路况检测*/
							if(Road_Test_STOP(1400)==1)
							{
								delay_ms(500);
								Car_Go(Go_Speed, 1200);      			    			// 主车前进
								delay_ms(500);								
								Full_STOP();																// 主车停车										
								delay_ms(50);
								Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
								delay_ms(50);									
							}
							else
							{
								delay_ms(50);
								Car_Go(Go_Speed, Go_Temp);      			    	// 主车前进				
								delay_ms(50);								
							}				
							
							if(Detected==1)                               //前面没有检测到路障（可能这里有路障）
							{
									Car_R45(90, 480);											 		// 右旋转 45度						
									delay_ms(50);
									Car_R45(90, 480);													// 右旋转 45度						
									delay_ms(200);
							}
							else
							{
									delay_ms(50);											
									Full_Right(wheel_Speed);                  // 主车右转		
									delay_ms(50);	
									Car_Back(30, 200);						 						//主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);
									Car_Back(30, 200);						 						//主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);	
									Car_Back(30, 200);						 						//主车后退	
									delay_ms(200);
									MP_Tracking(30, 200);						
									delay_ms(200);					
							}
							/*路况检测*/
							switch(Road_Test_Read_Out(1850))							//路况检测+中途读卡+终点读卡(单段)
							{
								case 0x02:
								{
									Car_location=0xD2;
									Car_location_ASCll[0]='D';
									Car_location_ASCll[1]='2';
									break;
								}
								default:break;
							}
							delay_ms(50);
							Car_Go(Go_Speed, Go_Temp);      			    		// 主车前进				
							delay_ms(50);	
							
							break;
						}
					default:break;						
					}
				
					/*ETC检测*/
					delay_ms(500); 
					delay_ms(500);
//					ETC_Get_Zigbee();																// ETC系统检测（ETC标志物坏了）
					delay_ms(50);	
						
					/*D2-F2*/
					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:
						{
							Car_location=0xE2;
							Car_location_ASCll[0]='E';
							Car_location_ASCll[1]='2';
							break;
						}
						case 0x02:
						{
							Car_location=0xF2;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='2';
							break;
						}
						default:break;
					}
					delay_ms(50);
					Car_Go(Go_Speed, Go_Temp);      			    			 // 主车前进				

				
					if(Detected==0)//前面没有检测到路障（可能这里有路障）
					{
						Car_R45(90, 480);											 					// 右旋转 45度						
						delay_ms(50);
						Car_R45(90, 480);																// 右旋转 45度						
						delay_ms(200);
						Car_Back(30, 100);						 									//主车后退	
						delay_ms(200);
						MP_Tracking(30, 100);														//码盘循迹				
						delay_ms(200);
						Car_Back(30, 100);						 									//主车后退	
						delay_ms(200);
						MP_Tracking(30, 100);														//码盘循迹						
						delay_ms(200);
						Car_Back(30, 100);						 									//主车后退	
					}
					else
					{
						delay_ms(50);											
						Full_Right(wheel_Speed);                   			// 主车右转		
						delay_ms(50);							
					}
			
					/*路况检测*/
					Road_Test_Flag=Road_Test_STOP(1400);
					if(Road_Test_Flag==1)//地形
					{
						delay_ms(100);
						Detected=1;																	    // 地形是否检测到标志位
						Car_Go(Go_Speed, 850);      			    			    // 主车前进		
						delay_ms(100);					
					}	
					else if(Road_Test_Flag==2)//卡
					{
						RFID_detection_motion();								        // 微动检测读卡
						Car_Go(Go_Speed, 50);      			    			      // 主车前进					
						Car_location=0xF3;
						Car_location_ASCll[0]='F';
						Car_location_ASCll[1]='3';
					}
					else//都没有
					{
						delay_ms(100);
						Car_Back(Go_Speed, 850);						 		        // 主车后退
						delay_ms(100);				
					}	
					
					/*语音识别*/
					delay_ms(300);
					SYN_Extern();									   			            // 语音识别
					delay_ms(300); 	
					Car_Go(Go_Speed, 480);      			    			      // 主车前进
					delay_ms(50);
					if(Destination_Read_Car()==1)											// 寻终点的卡的循迹	
					{
							Car_location=0xF4;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='4';
					}					
					Full_STOP();																			// 主车停车	
					delay_ms(200);
					Car_Go(Go_Speed, Go_Temp-100);      			    		// 主车前进				
					delay_ms(50);	
				
					
					/*F4-F6*/
					delay_ms(50);
					switch(Road_Test_Read_Out(1350))									// 路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:
						{
							Car_location=0xF5;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='5';
							break;
						}
						case 0x02:
						{
							Car_location=0xF6;
							Car_location_ASCll[0]='F';
							Car_location_ASCll[1]='6';

							break;
						}
						default:break;
					}	
					Full_STOP();																      // 主车停车	
					delay_ms(50);
					Car_Go(Go_Speed, Go_Temp);      			    			  // 主车前进				
					delay_ms(50);					
					
					delay_ms(50);											
					Full_Right(wheel_Speed);                          // 主车右转		
					delay_ms(50);

					/*F6-D6*/
					delay_ms(50);
					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xE6;
							Car_location_ASCll[0]='E';
							Car_location_ASCll[1]='6';
							break;
						}
						case 0x02:
						{
							Car_location=0xD6;
							Car_location_ASCll[0]='D';
							Car_location_ASCll[1]='6';
							break;
						}
						default:break;
					}
					Full_STOP();																      // 主车停车	
					delay_ms(50);
					Car_Go(Go_Speed, Go_Temp);      			    			  // 主车前进				
					delay_ms(50);	
							
					/*调试信息上传*/
					Send_Debug(Car_location);												  //发送RFID卡的位置
					SYN_Play("RFID卡位置");
					sprintf((char*)Fifo,"%X\n",Car_location);
					delay_ms(100);
					if(Car_location!=0)
					{		
						SYN_Play((char*)Fifo);	
					}	
					else
					{
						SYN_Play("不知道");						
					}
					
					/*交通灯识别*/
//					Car_Go(Go_Speed, Go_Temp-100);      			      // 主车前进					
					delay_ms(50);
					Send_ZigbeeData_To_Fifo(TrafficA_Open, 8);   	    // 智能交通灯进入识别模式
					delay_ms(100);
					uploading_flat_computer(0xB2);									  //发送交通灯识别
					delay_ms(100);
					uploading_flat_computer(0xB2);										//发送交通灯识别
					delay_ms(100);
					LED_Date_Zigbee(Car_location,0x00,0x00,0x02);
					delay_ms(100);			
					LED_Date_Zigbee(Car_location,0x00,0x00,0x02);
					delay_ms(100);

					TIM3_OverTime(0x01);															//交通灯识别超时检测（包含清除wifi标志位）
					
					make_Yes=0xA3;																		//运行结束标志位
					Eliminate_Flag();													 				//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x04:
				{
//					Car_Back(Go_Speed, Go_Temp-100);				  			//主车后退
					delay_ms(200);						
					Car_L45(90, 480);											 						// 左旋转 45度						
					delay_ms(50);
					

					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);						
					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);						
					Rotate_show_Inf("ABCDEF",Car_location_ASCll[0],Car_location_ASCll[1]);//立体显示标志物显示数据
					delay_ms(200);						

					Car_R45(90, 480);											 						// 右旋转 45度						
					delay_ms(50);
					
					Temporary_parking=Temporary_position(RXRFID[7],RXRFID[8]);//去暂时停放的位置
					delay_ms(50);

					Send_Zigbee_Data(0x0A,Temporary_parking,Temporary_parking,Temporary_parking);//发送避让点
					delay_ms(200);
					Send_Zigbee_Data(0x0A,Temporary_parking,Temporary_parking,Temporary_parking);//发送避让点
					delay_ms(200);
					Send_Zigbee_Data(0x0A,Temporary_parking,Temporary_parking,Temporary_parking);//发送避让点
					delay_ms(200);											
					Send_Zigbee_Data(0x0B,Car_location%5,Car_location%5,Car_location%5);//发送入库坐标	
					delay_ms(200);			
					Send_Zigbee_Data(0x0B,Car_location%5,Car_location%5,Car_location%5);//发送入库坐标	
					delay_ms(200);					
					Send_Zigbee_Data(0x0B,Car_location%5,Car_location%5,Car_location%5);//发送入库坐标	
					delay_ms(200);					
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);	
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);						
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);//发送启动副车
					delay_ms(200);					
					SYN_Play("发送成功");
					delay_ms(200);												
					SYN_Play("小伙伴启动");
					
					delay_ms(100);														
					Digital_tube_dynamic_display(00,1);				           	//数码管显示开启
					delay_ms(300);									
					TIM3_OverTime(0x05);																	//副车启动超时检测（包含清除wifi标志位）
				
					make_Yes=0xA4;																				//运行结束标志位
					Eliminate_Flag();													 						//清除Wifi和Zigbee接收标志位
					break;
				}
				case 0x05:
				{
						delay_ms(200);										
						Digital_tube_dynamic_display(00,0);				           //数码管显示关闭
						delay_ms(200);	
						Digital_tube_dynamic_display(00,0);				           //数码管显示关闭
						delay_ms(200);	
						Task_board_buzzer(RESET);						
						delay_ms(50);						
						Return_coordinate_point(Temporary_parking,Car_location);//从暂时停放位置返回到F6
						delay_ms(200);						
						Car_L45(90, 480);											 							 // 左旋转 45度						
						delay_ms(50);	
						Digital_tube_Infrared_Send(Alarm_Open, 6);           // 烽火台 -> 开启
						delay_ms(200);	
						Digital_tube_Infrared_Send(Alarm_Open, 6);           // 烽火台 -> 开启
						delay_ms(200);					
						delay_ms(50);		
						Car_R45(90, 480);											 							 // 右旋转 45度						
						delay_ms(50);

						MP_Tracking(30,1000);												 //码盘循迹
						delay_ms(200);					
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						MP_Tracking(30,1000);												 //码盘循迹
						delay_ms(200);						
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						Car_Back(30, 1200);						 						   //主车后退
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);

						SYN_Play("完成");

						make_Yes=0xA5;														 	 //运行结束标志位
						Eliminate_Flag();													   //清除Wifi和Zigbee接收标志位
					break;
				}
			}
#endif	
#if 0
//2018国赛题目
			switch (make_Yes)
			{
				case 0x01:
				{
						SYN_Play("开始启动");
						delay_ms(500);
				
						/*启动LED计时器*/
//						SYN_Play("启动LED计时器");						
					  Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
            delay_ms(200);
            Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
            delay_ms(200);

						/*F1-F2*/
//						Car_Go(Go_Speed, Go_Temp+325);      					// 主车前进
//						delay_ms(200);					
						Car_Track(Go_Speed);									    			// 主车循迹
						Full_STOP();																		//停下来
						delay_ms(200);					
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
						delay_ms(200);
						Full_Right(wheel_Speed);                  			// 主车右转
						delay_ms(200);

						/*图片识别*/
						delay_ms(200);	
						Car_R45(90, 400);											 // 右旋转 45度						
						delay_ms(200);
			
						make_Yes=0x02;
						Wifi_Rx_flag=0;														//wifi缓存数据标志位清除
						
//						TIM3_OverTime(0x00,0x02);									//图形识别超时检测（包含清除wifi标志位）
						delay_ms(500);
						delay_ms(500);
						delay_ms(500);

	
					break;
				}
				case 0x02:
				{
						SYN_Play("识别成功");
						delay_ms(500);

						delay_ms(200);	
						Car_L45(90, 400);											 // 左旋转 45度						
						delay_ms(200);			
				
						/*F2-D2*/
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();															//停下来
						delay_ms(200);					
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进		
						delay_ms(200);
					
						/*交通灯识别*/
						Car_Go(Go_Speed, Go_Temp-100);      			    // 主车前进					
//						SYN_Play("交通灯识别");
						delay_ms(500);
            Send_ZigbeeData_To_Fifo(TrafficA_Open, 8);   // 智能交通灯进入识别模式
						delay_ms(100);
						uploading_flat_computer(0xB2);						//发送交通灯识别
						delay_ms(100);
						uploading_flat_computer(0xB2);						//发送交通灯识别
						
						TIM3_OverTime(0x01,0xA2);									//交通灯识别超时检测（包含清除wifi标志位）
						
					break;
				}
				case 0x03:
				{
						/*D2-B2*/
						Car_Back(Go_Speed, Go_Temp-100);				  //主车后退
						delay_ms(200);						
						Read_Car_single(1900);										//单段读卡(没有卡就是单纯循迹)
						Full_STOP();															//停下来
						delay_ms(200);					
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进		
						delay_ms(200);	

						/*静态标志物（二维码）识别*/	
//						SYN_Play("二维码识别");
						uploading_flat_computer(0xB4);						//发送开始二维码识别
						delay_ms(100);
						uploading_flat_computer(0xB4);            //发送开始二维码识别
						delay_ms(100);	
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进	
						delay_ms(100);	
						TIM3_OverTime(0x02,0xA3);									//二维码识别超时检测（包含清除wifi标志位）
					
					break;
				}	
				case 0x04:
				{	
						/*超声波测距*/
						Car_Back(Go_Speed, Go_Temp*2);				  //主车后退	
						delay_ms(200);
//						SYN_Play("超声波测距");
						delay_ms(200);
						
						for(int i2=0;i2<4;i2++)
						{	
							DIS=Full_Measure();
							if(DIS>0)
							{
								SYN_Play("测距成功");	
									break;								
							}
								else
								{
									SYN_Play("测距失败，再来一次");
									delay_ms(200);								
								}				
						}	
						delay_ms(200);
						voice(DIS,"毫米");
						delay_ms(200);
						sprintf((char*)Fifo,"D:%dmm\n",DIS);
						Send_Debug_Info(Fifo,8);								
						delay_ms(200);								
						
												
						Car_Go(Go_Speed, Go_Temp);      			  // 主车前进						
						delay_ms(200);
            LED_Dis_Zigbee(DIS);											//发送LED标志物显示距离
						delay_ms(200);	  
            LED_Dis_Zigbee(DIS);											//发送LED标志物显示距离
						delay_ms(200);
						delay_ms(200);				
						Full_Left(wheel_Speed);                   // 主车左转
						delay_ms(200);				
				
						/*B2-B4*/
						delay_ms(200);
						Read_Car_single(1900);										//单段读卡(没有卡就是单纯循迹)
						Full_STOP();			     								    //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						delay_ms(200);

							
						/*光照探测调整*/
//						SYN_Play("光照探测调整");
						delay_ms(200);				
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);		
						
						delay_ms(200);
						Gears=Light_djustment(1);         				//光照探测
						delay_ms(200);	

						for(int CT=0;CT<4;CT++)
						{
							SYN_Play("光照初始档[=dang3]位");
							delay_ms(300);							
							voice(Gears,0);	
							SYN_Play("档[=dang3]");
							if(Gears>0)
							{
								delay_ms(200);
								sprintf((char*)Fifo,"L:%dd\n",Gears);
								Send_Debug_Info(Fifo,8);								
								delay_ms(200);															
								Send_Debug(Gears);
								delay_ms(200);								
								Debug_wifi('L',0x00,Gears);
								break;
							}
						}
						delay_ms(200);						
						Data_N=(((Gears*3-1)*RFID_Extraction_1())%4)+1;//计算入库坐标
						delay_ms(200);					
						Send_path_garage_coordinates(Data_N,RFID_Extraction_2());//发送路径/车库坐标
						delay_ms(200);
						Send_path_garage_coordinates(Data_N,RFID_Extraction_2());//发送路径/车库坐标
						delay_ms(200);	

						Send_Debug(Data_N);									//发送入库调试信息
						delay_ms(200);	
						Send_Debug(RFID_Extraction_2());		//发送车头朝向调试信息
						delay_ms(200);	

						Debug_wifi('N',0x00,Gears);									//发送入库调试信息
						delay_ms(200);	
						Debug_wifi('R',0x00,RFID_Extraction_2());		//发送车头朝向调试信息

						delay_ms(200);				
						Full_Left(wheel_Speed);                   // 主车左转
						delay_ms(200);					
						
						delay_ms(200);				
						Full_Left(wheel_Speed);                   // 主车左转
						delay_ms(200);							
						
						/*特殊地形+RFID识别*/
						Car_Back(30, 200);						 						//主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);
						Car_Back(30, 200);						 						 //主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);	
						Car_Back(30, 200);						 						   //主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);				
						Road_Test(1900);														//地形检测
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);				
						
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);						
						SYN_Play("发送成功");
						delay_ms(200);												
						SYN_Play("小伙伴启动");
										
						TIM3_OverTime(0x05,0xA4);									//副车启动超时检测（包含清除wifi标志位）

						
						break;
				}
				case 0x05:
				{	
						 SYN_Play("开始启动");
						/*语音识别*/
				    delay_ms(300);
						SYN_Extern();									   			 //语音识别
						delay_ms(300); 
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(300); 				

						MP_Tracking(30,800);												//码盘循迹
					
						delay_ms(200);	
						Car_R45(90, 400);											 // 右旋转 45度						
						delay_ms(200);
						delay_ms(200);	
						Car_R45(90, 400);											 // 右旋转 45度						
						delay_ms(200);

					
					
						Digital_tube_Infrared_Send(Static_marker_1, 6);           // 烽火台 -> 开启
						delay_ms(200);	
						Digital_tube_Infrared_Send(Static_marker_1, 6);           // 烽火台 -> 开启
						delay_ms(200);
					
						/*烽火台报警*/
						Car_L45(90, 400);											 // 左旋转 45度						
						delay_ms(200);
						delay_ms(200);	
						Car_L45(90, 400);											 // 左旋转 45度						
						delay_ms(200);					
						delay_ms(200);
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();			     								    //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						delay_ms(200);
						
						/*ETC*/
						delay_ms(300); 
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(500); 
						delay_ms(500);
						ETC_Get_Zigbee();												// ETC系统检测
						delay_ms(200);	
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();			     								    //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						delay_ms(200);	
						/*入库*/
						delay_ms(200);	
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);
						
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);					
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);						
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						Car_Back(30, 1200);						 						   //主车后退
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
					
						Digital_tube_dynamic_display(00,1);				           //数码管显示开启
						delay_ms(300);

						/*无线充电开启*/
//						SYN_Play("无线充电开启");						
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);

						SYN_Play("完成");

						make_Yes=0xA5;
					break;
				}	
				case 0x06:
				{	
					break;
				}	
				default:break;
			}

#endif
//2019国赛题目
#if 0
    switch(make_Yes)
    {        
			case 0x01:
			{
 						Send_ZigbeeData_To_Fifo(GarageB_To1, 8);	// 车库到达第一层
 						delay_ms(200);
  						Send_ZigbeeData_To_Fifo(GarageB_To1, 8);	// 车库到达第一层
 						delay_ms(200);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
  				        delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);
 						delay_ms(500);					
						SYN_TTS("开始启动");
						delay_ms(500);
				
						/*启动LED计时器*/
						SYN_TTS("启动LED计时器");
					  Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);    // LED显示标志物计时模式 -> 清零
            delay_ms(200);
            Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    // LED显示标志物计时模式 -> 开启
            delay_ms(200);
					
						Car_Go(Go_Speed, Go_Temp+350);      			 // 主车前进							
				
						/*B7-B6*/
						Car_Track(Go_Speed);									 // 主车循迹
						Car_Go(Go_Speed, Go_Temp);      			 // 主车前进							
	
						Car_L45(90, 400);               			 // 左旋转 45度
					
						SYN_TTS("车牌识别");
						/*TFT显示*/
						TFT_Show_Zigbee('A',"A66666");         // TFT显示器显示车牌
						delay_ms(200);	
						TFT_Show_Zigbee('A',"A66666");         // TFT显示器显示车牌
						delay_ms(200);

						Car_R45(90, 400);               			 // 右旋转 45度
						delay_ms(200);
						delay_ms(200);
						
						Full_Right(wheel_Speed);                  // 主车右转
										
						/*道闸显示*/
						SYN_TTS("道闸开启");
						Gate_Show_Zigbee("A66666");		// 道闸显示车牌
						Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
						delay_ms(500);
						delay_ms(500);

						/*B6-D6*/
						Car_Track(Go_Speed);             // 主车循迹
						Car_Go(Go_Speed, Go_Temp);   // 主车前进					
						
						/*交通灯识别*/
						SYN_TTS("交通灯识别");
            delay_ms(500);
            Send_ZigbeeData_To_Fifo(TrafficA_Open, 8);   // 智能交通灯进入识别模式
						uploading_flat_computer(0xB2);	
						delay_ms(100);
						uploading_flat_computer(0xB2);
						make_Yes = 0xA0;
						TIM_Cmd(TIM3,ENABLE); //使能定时器3

				break;
			}
			case 0x02:
			{
						SYN_TTS("二维码寻找");
						/*二维码寻找*/
						Car_L45(90, 400);               			 // 左旋转 45度

						delay_ms(500);
						delay_ms(500);
						Car_R45(90, 400);               			 // 右旋转 45度

						Car_Go(Go_Speed, Go_Temp+650);         // 主车前进
						
						/*二维码寻找*/
						Car_L45(90, 400);               			 // 左旋转  45度
						Car_L45(90, 400);               			 // 左旋转  45度
						
						delay_ms(500);
						delay_ms(500);						

						Car_R45(90, 400);               			 // 左旋转  45度
						Car_R45(90, 400);               			 // 左旋转  45度

						/*D6-F6*/
						Car_Track(Go_Speed);                   // 主车循迹
						Car_Go(Go_Speed, Go_Temp);             // 主车前进

						delay_ms(300);						

						Car_Left(wheel_Speed);                 // 主车左转
						/*二维码寻找*/
						Car_L45(90, 400);               			 // 左旋转 45度

						delay_ms(500);
						delay_ms(500);
						Car_R45(90, 400);               			 // 右旋转 45度


						Car_R45(90, 400);               			 // 右旋转 45度
						SYN_TTS("图片识别");
						Car_L45(90, 400);               			 // 左旋转 45度

						/*F6-F4*/
						Car_Track(Go_Speed);            			 // 主车循迹
						Car_Go(Go_Speed, Go_Temp);  					 // 主车前进
						
						/*语音识别*/
						SYN_7318_One_test(1,0);									 //语音识别
						delay_ms(300); 
						delay_ms(300); 		
						
						Full_Left(wheel_Speed);                // 主车左转
						
						/*ETC检测*/				
						SYN_TTS("ETC检测");				
						delay_ms(500);
						delay_ms(500);
						ETC_Get_Zigbee();				               // ETC系统检测
						delay_ms(200);

						/*F4-D4-RFID检测*/
						terrain=1;														 //RFID检测
						Car_Track(Go_Speed);									 // 主车循迹
						SYN_TTS("RFID检测");
						if(detection==1)
						{							
								Car_Go(Go_Speed, Go_Temp);      	 // 主车前进
								while(Auto_Read_card()==0)
								{
										Car_Back(Go_Speed, Go_Temp);	 //主车后退	
										delay_ms(200);									
										Car_Go(Go_Speed, Go_Temp);	   //主车前进
								}
								SYN_TTS("读卡成功");						
								detection=0;
								terrain=0;												 //RFID检测					
								Car_Track(Go_Speed);							 // 主车循迹						
						}
						Car_Go(Go_Speed, Go_Temp);      			 // 主车前进
	
						/*D4-B4-RFID检测*/
						terrain=1;														 //RFID检测
						Car_Track(Go_Speed);									 // 主车循迹
						if(detection==1)
						{							
								Car_Go(Go_Speed, Go_Temp);      	 // 主车前进
								while(Auto_Read_card()==0)
								{
										Car_Back(Go_Speed, Go_Temp);	 //主车后退	
										delay_ms(200);									
										Car_Go(Go_Speed, Go_Temp);	   //主车前进
								}
								SYN_TTS("读卡成功");						
								detection=0;
								terrain=0;												 //RFID检测					
								Car_Track(Go_Speed);							 // 主车循迹						
						}
						Car_Go(Go_Speed, Go_Temp);      			 // 主车前进
						delay_ms(300);
						
						Full_Right(wheel_Speed);               // 主车右转
						delay_ms(300);
					
						/*B4-B2-RFID检测*/
						terrain=1;														 //RFID检测
						Car_Track(Go_Speed);									 // 主车循迹
						if(detection==1)
						{							
								Car_Go(Go_Speed, Go_Temp);      	 // 主车前进
								while(Auto_Read_card()==0)
								{
										Car_Back(Go_Speed, Go_Temp);	 //主车后退	
										delay_ms(200);									
										Car_Go(Go_Speed, Go_Temp);	   //主车前进
								}
								SYN_TTS("读卡成功");						
								detection=0;
								terrain=0;												 //RFID检测					
								Car_Track(Go_Speed);							 // 主车循迹						
						}
						Car_Go(Go_Speed, Go_Temp);      			 // 主车前进	
						delay_ms(200);

						Full_Right(wheel_Speed);               // 主车右转

							/*B2-D2-地形检测*/
						SYN_TTS("地形检测");
						terrain=1;                             //地形检测控制开启
						Car_Track(Go_Speed);                   // 主车循迹
						if(detection==1)
						{
							Car_Back(50, 1000);						       //主车后退
							Car_Track(Go_Speed);                 // 主车循迹	
							Car_Back(30, 500);						       //主车后退
							Car_Track(Go_Speed);                 // 主车循迹														
							Car_Go(Go_Speed, Go_Temp);			     // 主车前进
							Car_Track(Go_Speed);                 // 主车循迹							
							terrain=0;										       //地形检测控制开启
							detection=0;									       //地形检测标志位
							Car_Go(Go_Speed, Go_Temp+1250);      // 主车前进
							Car_Track(Go_Speed);                 // 主车循迹					
						
						}	
						
						
						Car_Go(Go_Speed, Go_Temp);			       // 主车前进
						delay_ms(200);
						Car_Right(wheel_Speed);                // 主车右转
						Car_Track(Go_Speed);                   // 主车循迹							
						Car_Go(Go_Speed, Go_Temp);		       	 // 主车前进
						
						delay_ms(200);
						Full_Right(wheel_Speed);               // 主车右转
						delay_ms(200);						
						Full_Right(wheel_Speed);               // 主车右转					

						Car_Time_Track(30,3000);

						SYN_TTS("左右双闪开启");
//						Set_tba_WheelLED(L_LED,SET);           //左转向灯开启	
//						Set_tba_WheelLED(R_LED,SET);           //右转向灯开启
						
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);						
						SYN_TTS("发送成功");
						make_Yes = 0x00;

				break;
			}
			case 0x03:
			{

						delay_ms(100);
						SYN_TTS("开始启动");
				
						delay_ms(500);

//						Set_tba_WheelLED(L_LED,RESET);           //左转向灯关闭	
//						Set_tba_WheelLED(R_LED,RESET);           //右转向灯关闭

				
						Car_Track(Go_Speed);                    // 主车循迹	
						Car_Go(Go_Speed, Go_Temp);			        // 主车前进
						delay_ms(200);
						Full_Left(wheel_Speed);                 // 主车左转
				
						Stereo_Base[2]= distance_QRcode[0];     //距离数据获取
						Stereo_Base[3]= distance_QRcode[1];
						Stereo_Base[4]= 'C';
						Stereo_Base[5]= 'M';
				
						/*立体显示*/
						SYN_TTS("立体显示开启");
						Car_L45(90, 400);               			 // 左旋转 45度
						Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);
						Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);					
						Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);	
						Car_R45(90, 400);               			 // 右旋转 45度

						delay_ms(200);
						Full_Right(wheel_Speed);               // 主车右转
				
						/*光照探测*/
						SYN_TTS("光照探测");						
						Light_Probes=Light_djustment(street_lamp_data);         //光照探测

						delay_ms(200);
						Full_Right(wheel_Speed);                // 主车右转

						Car_Track(Go_Speed);           				  // 主车循迹					
						Car_Go(Go_Speed, Go_Temp);						  // 主车前进
						
						delay_ms(200);								
						Full_Right(wheel_Speed);                // 主车右转
						Car_R45(90, 400);               			  // 右旋转 45度

						/*烽火台*/
						SYN_TTS("烽火台开启");						
						Infrared_Send(Alarm_Open, 6);           // 烽火台 -> 开启
						delay_ms(200);	
						Infrared_Send(Alarm_Open, 6);           // 烽火台 -> 开启
						delay_ms(200);	

						Car_L45(90, 400);               			 			 // 左旋转 45度
						
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);					
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);						
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						Car_Back(30, 1200);						 						   //主车后退

						/*无线充电开启*/
						SYN_TTS("无线充电开启");						
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);
	
						/*无线充电开启*/
						SYN_TTS("LED显示关闭");							
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						make_Yes = 0x00;

						SYN_TTS("完成");							

				break;
			}
			case 0x04:
			{
				
				break;
			}	
			default: break;
		}
		
#endif

2020省赛题
		switch(make_Yes)
		{
			case 0x01:
			{
						SYN_TTS("开始启动");
						delay_ms(500);
				
						/*启动LED计时器*/
//						SYN_TTS("启动LED计时器");						
					  Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);    // LED显示标志物计时模式 -> 清零
            delay_ms(200);
            Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);     // LED显示标志物计时模式 -> 开启
            delay_ms(200);
				
						/*无线充电开启*/
//						SYN_TTS("无线充电开启");						
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(Charge_Open, 8);     //无线充电标志物开启
						delay_ms(300);
				
					  /*B7-B6*/				
						Car_Go(Go_Speed, Go_Temp+350);      			// 主车前进
						Car_Track(Go_Speed);									    // 主车循迹
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进		
						Full_STOP();															//停下来
						delay_ms(200);
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						
						/*交通灯识别*/
						SYN_TTS("交通灯识别");
						delay_ms(500);
            Send_ZigbeeData_To_Fifo(TrafficA_Open, 8);   // 智能交通灯进入识别模式
						uploading_flat_computer(0xB2);						//发送交通灯识别
						delay_ms(100);
						uploading_flat_computer(0xB2);						//发送交通灯识别
						
						TIM3_OverTime(0x01,0xA1);									//交通灯识别超时检测（包含清除wifi标志位）
				break;
			}
			case 0x02:
			{
				
				
						/*B6-D6*/
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();			     								    //停止
						delay_ms(200);				
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						delay_ms(200);

						/*D6-F6*/
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();			     								    //停止
						delay_ms(200);				
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进			
						delay_ms(200);
						Full_STOP();			     								    //停止		
						delay_ms(200);				
						Full_Left(wheel_Speed);                   // 主车左转
						delay_ms(200);				
				
						/*F6-F4*/
						delay_ms(200);
						Car_Track(Go_Speed);									    // 主车循迹
						Full_STOP();			     								    //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			    // 主车前进
						delay_ms(200);
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);
						
					  /*超声波测距*/
						Car_Back(Go_Speed, Go_Temp-100);				  //主车后退	
						delay_ms(200);
//						SYN_TTS("超声波测距");
						delay_ms(200);
						
						for(int i2=0;i2<4;i2++)
						{	
							DIS=Full_Measure();
							if(DIS>0)
							{
								SYN_TTS("测距成功");	
									break;								
							}
								else
								{
									SYN_TTS("测距失败，再来一次");
									delay_ms(200);								
								}				
						}		
							
						delay_ms(200);
            LED_Dis_Zigbee(DIS);											//发送LED标志物显示距离
						delay_ms(200);	
            LED_Dis_Zigbee(DIS);											//发送LED标志物显示距离
						delay_ms(200);	
							
						MOV1=DIS;//MOV1 单位(mm)	
							
						Car_Go(Go_Speed, Go_Temp-100);      			// 主车前进

							
						/*静态标志物（二维码）识别*/	
//						SYN_TTS("二维码识别");
						uploading_flat_computer(0xB4);						//发送开始二维码识别
						delay_ms(100);
						uploading_flat_computer(0xB4);            //发送开始二维码识别
						delay_ms(100);	
						TIM3_OverTime(0x02,0xA2);									//二维码识别超时检测（包含清除wifi标志位）

				break;
			}
			case 0x03:
			{
						/*F4-F2*/									
						delay_ms(200);
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);
						Car_Track(Go_Speed);									     // 主车循迹
						Full_STOP();			     								     // 停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);
						Full_Right(wheel_Speed);                   // 主车右转
						delay_ms(200);
						
						/*光照探测调整*/
//						SYN_TTS("光照探测调整");		
						delay_ms(200);
						Light_djustment(Calculation_of_street_lamp_stalls(MOV1));         //光照探测
						delay_ms(200);				
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);
				
						/*图形识别*/
//						SYN_TTS("图形识别");

						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进
						delay_ms(200);

						TFT_Show_Zigbee('A',"666666");						 //TFT车牌显示
						delay_ms(500);
						delay_ms(500);
						delay_ms(500);
						delay_ms(500);
//						SYN_TTS("识别成功");
						Car_Back(Go_Speed, Go_Temp);				  //主车后退	
						delay_ms(200);

//						TIM3_OverTime(0x03,0xA3);									//图形识别超时检测（包含清除wifi标志位）

						make_Yes = 0xA3;
						make_Yes = 0x04;
						Wifi_Rx_flag=0;														//wifi缓存数据标志位清除
				break;
			}
			case 0x04:
			{
						delay_ms(200);
						Full_Left(wheel_Speed);                   // 主车左转	
						delay_ms(200);
						
						/*特殊地形+RFID识别*/
						Car_Back(30, 200);						 						//主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);
						Car_Back(30, 200);						 						 //主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);	
						Car_Back(30, 200);						 						   //主车后退	
						delay_ms(200);
						MP_Tracking(30, 200);						
						delay_ms(200);				
						RFID_terrain_detection(1900);
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);
						
						RFID_extraction_data(RXRFID,RFID_accomplish);							//RFID数据提取有效字节
						delay_ms(200);						
						Send_top_three_coordinates(RFID_accomplish[0],RFID_accomplish[1],RFID_accomplish[2]);//发送自由路径前三坐标
						delay_ms(200);						
						Send_After_three_coordinates(RFID_accomplish[3],RFID_accomplish[4],RFID_accomplish[5]);//发送自由路径后三坐标
						delay_ms(200);
						Send_top_three_coordinates(RFID_accomplish[0],RFID_accomplish[1],RFID_accomplish[2]);//发送自由路径前三坐标
						delay_ms(200);						
						Send_After_three_coordinates(RFID_accomplish[3],RFID_accomplish[4],RFID_accomplish[5]);//发送自由路径后三坐标
						delay_ms(200);
							
						/*车牌识别*/
//						SYN_TTS("车牌识别");
						TFT_Show_Zigbee('B',"666666");						//TFT车牌显示
						delay_ms(500);
						delay_ms(500);
						delay_ms(500);
						delay_ms(500);
//						SYN_TTS("识别成功");		

//						TIM3_OverTime(0x04,0xA4);									//车牌识别超时检测（包含清除wifi标志位）

						make_Yes = 0xA4;
						make_Yes = 0x05;
						Wifi_Rx_flag=0;														//wifi缓存数据标志位清除
				break;
			}
			case 0x05:
			{		
						delay_ms(200);
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);						
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);				
				
						delay_ms(500);
				
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Secondary_car_start,8);			//发送副车启动																
						delay_ms(200);						
						SYN_TTS("发送成功");
				
						TIM3_OverTime(0x05,0xA5);									//副车启动超时检测（包含清除wifi标志位）
				break;
			}
			case 0x06:
			{						
						SYN_TTS("开始启动");
				
						/*道闸显示*/
						Gate_Show_Zigbee((char*)plate_number);		// 道闸显示车牌
						Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
						delay_ms(200);
						Send_ZigbeeData_To_Fifo(Gate_Open, 8);       // 道闸 -> 开启
						delay_ms(500);
				
						Car_Track(Go_Speed);									       // 主车循迹
						Full_STOP();			     								       //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			       // 主车前进				
						delay_ms(200);					
				
						/*语音识别*/
				    delay_ms(300);
						SYN_7318_One_test(1,0);									    //语音识别
						delay_ms(300); 
						 		
						/*B4-D4*/
						delay_ms(200);
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);
						Car_Track(Go_Speed);									     // 主车循迹
						Full_STOP();			     								     //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);					
				
						/*立体显示*/						
						Car_L45(90, 400);               			 // 左旋转 45度
//						SYN_TTS("立体显示开启");
						Digital_tube_Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);
						Digital_tube_Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);					
						Digital_tube_Infrared_Send(Stereo_Base,6);		       // 立体显示 隧道有事故，请绕行
						delay_ms(200);	 
						Car_R45(90, 400);											 // 右旋转 45度
						
						delay_ms(200);
						Full_Right(wheel_Speed);                  // 主车右转
						delay_ms(200);
						
						/*D4-D6*/
						delay_ms(200);
						Car_Track(Go_Speed);									     // 主车循迹
						Full_STOP();			     								     //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);	
						
						/*D6-F6*/
						delay_ms(200);
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);
						Car_Track(Go_Speed);									     // 主车循迹
						Full_STOP();			     								     //停止
						delay_ms(200);
						Car_Go(Go_Speed, Go_Temp);      			     // 主车前进				
						delay_ms(200);

						/*F6-F7*/
						delay_ms(200);
						Full_Left(wheel_Speed);                    // 主车左转	
						delay_ms(200);
						
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);					
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						MP_Tracking(30,1000);												//码盘循迹
						delay_ms(200);						
						Car_Back(30, 1000);						 						   //主车后退
						delay_ms(200);
						Car_Back(30, 1200);						 						   //主车后退
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);    // LED显示标志物计时模式 -> 关闭
						delay_ms(300);
						
						SYN_TTS("完成");

						make_Yes = 0xA6;
						Wifi_Rx_flag=0;														//wifi缓存数据标志位清除
				break;
			}				


	#if 0 21重庆
				switch(make_Yes)
			{
				case 0x01:
				{	
					
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启					
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					LED_Date_Zigbee(0x20,0x20,0x10,2);							// LED显示数据
					LED_Date_Zigbee(0x20,0x20,0x10,2);							// LED显示数据

					Car_Go(Go_Speed, Go_Temp+350);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					Full_Left(wheel_Speed);                   			// 主车左转
					
					
					MP_Tracking(30,100);												 		// 码盘循迹
					Car_Back(30, 100);						 						   		// 主车后退
					Car_Back(Go_Speed, Go_Temp); 										// 主车后退
					/*测距*/
					MOV1=Stadiometry();															// 测距	

					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);            			// 发送开始二维码A识别		

					Timeout_detection(10,0xA1,0x02);								// 二维码A10s超时检测					
					break;
				}
				case 0x02:
				{
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(100);																	// 连续转弯要加延时
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					Full_Right(wheel_Speed);                  			// 主车右转	
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
				
					MOV3=Dimming(LD(MOV1));  												// 调光
					Send_Wifi(0xBB,MOV3,0x00,0x00);  								// 上传路灯档位
					Send_Wifi(0xBB,MOV3,0x00,0x00);  								// 上传路灯档位

					Full_Left(wheel_Speed);                   			// 主车左转
					MP_Tracking(30,200);												 		// 码盘循迹
					
					/*交通灯识别*/
					uploading_flat_computer(0xB2);									// 发送交通灯识别
//					uploading_flat_computer(0xB2);								  // 发送交通灯识别	
					
					Timeout_detection(15,0xA2,0x03);								// 交通灯15s超时检测	
					break;
				}
				case 0x03:
				{
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Car_Go(Go_Speed, 200);      			    			// 主车前进	

					uploading_flat_computer(0xB0);									// 发送开始TFTA
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					
					Timeout_detection(30,0xA3,0x04);								// TFTA(图形)30s超时检测					
					break;
				}
				case 0x04:
				{
					Car_Back(Go_Speed, 200);      			    			// 主车前进	

				/*（Graph[0]：矩形 ）（Graph[1]：圆形 ）（Graph[2]：三角）（Graph[3]: 菱形）（Graph[4]：五角星）*/
					TFT_Test_Zigbee('A',0x40,0xA0+Graph[0],0xB0+Graph[1],0xC0+Graph[4]);			//TFTA显示		
					TFT_Test_Zigbee('A',0x40,0xA0+Graph[0],0xB0+Graph[1],0xC0+Graph[4]);			//TFTA显示		

					Full_Left(wheel_Speed);                   			// 主车左转
					/*密钥*/
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;	
					/*数据块*/
					Read_Car_Address=6*4+1;	// X*4+N(十进制)	
					
					Car_Back(30, 200);						 						   		// 主车后退
					The_two_card(1900);
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转	
						
					Send_Zigbee_Data(0x0C,RXRFID[0],RXRFID[1],0x00);					// 发送车头朝向
					Send_Zigbee_Data(0x0C,RXRFID[0],RXRFID[1],0x00);					// 发送车头朝向								
					
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车										
					
					Send_Wifi(0xB9,Two_car[0],Two_car[1],Two_car[2]);//破损车牌信息
					Send_Wifi(0xB9,Two_car[0],Two_car[1],Two_car[2]);//破损车牌信息
					Send_Wifi(0xBA,Two_car[3],Two_car[4],Two_car[5]);//破损车牌信息
					Send_Wifi(0xBA,Two_car[3],Two_car[4],Two_car[5]);//破损车牌信息
					
					uploading_flat_computer(0xB1);									// 发送开始TFTB
					uploading_flat_computer(0xB1);									// 发送开始TFTB	
					
					Timeout_detection(60,0xA4,0x05);								// 副车
					break;
				}				
				case 0x05:
				{

					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(100);																	// 连续转弯要加延时
					Full_Left(wheel_Speed);                   			// 主车左转

					Gate_Show_Zigbee((char*)Vice_car_QR);			// 道闸显示车牌(二维码的车牌)
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					Gate_Show_Zigbee((char*)Vice_car_QR);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启		

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
		
					MOV9=SYN_Extern();																		// 语音识别

					Full_Left(wheel_Speed);                   			// 主车左转
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					Car_L45(90, 480);																// 左旋转(45)度	
					Rotate_Dis_Inf(MOV9);
					Rotate_Dis_Inf(MOV9);
					Car_R45(90, 480);																// 右旋转(45)度	
				
					Full_Right(wheel_Speed);                  			// 主车右转	
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转	
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					Full_Right(wheel_Speed);                  			// 主车右转	
					
					MP_Tracking(30,1000);												 		// 码盘循迹
					Into_the_garage();
					Car_Back(30, 1000);						 						   		// 主车后退
					MP_Tracking(30,1000);												 		// 码盘循迹
					Car_Back(30, 1000);						 						   		// 主车后退
					
					Car_Back(30, 1000);						 						   		// 主车后退		

//					Garage_Cont_Zigbee('B', RXRFID[3]-'0');//车库
					switch((RXRFID[3]-'0'))
					{
						case 1:
						{
							break;
						}
						case 2:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							break;
						}						
						case 3:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To3, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To3, 8);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							break;
						}					
						case 4:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To4, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To4, 8);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							delay_ms(500);
							break;
						}
					}
					
					
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					SYN_Play("运行完成");
 					make_Yes=0xA6;																	// 最后要赋值
					
					break;
				}
			}
	#endif 
	21 广东
		switch(make_Yes)
	{
		case 0x01:
		{
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启					
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					LED_Date_Zigbee(0x66,0x66,0x66,2);							// LED显示数据			
					LED_Date_Zigbee(0x66,0x66,0x66,2);							// LED显示数据			
		
					Car_Go(Go_Speed, Go_Temp+330);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					Car_R45(90, 480);																// 右旋转(45)度	
					
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					delay_ms(100);
					Full_RL_little(1);

//					Timeout_detection(3,0xA1,0x02);									// 二维码A10s超时检测								
					Timeout_detection(10,0xA1,0x02);								// 二维码A10s超时检测								
			break;
		}
		case 0x02:
		{
					Car_R45(90, 480);																// 右旋转(45)度	
//					Full_Right(wheel_Speed);                  			// 主车右转	
					delay_ms(100);
			//		Full_RL_little(1);
					delay_ms(100);

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进			
					Full_Left(wheel_Speed);                   			// 主车左转
 
					MP_Tracking(Go_Speed, 850);      			    			// 主车前进		850	
		
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					
//					Timeout_detection(3,0xA2,0x03);									// TFTA(图形)30s超时检测						
					Timeout_detection(30,0xA2,0x03);								// TFTA(图形)30s超时检测						
			break;			
		}	
		case 0x03:
		{		
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
			
					Car_Go(Go_Speed, 200);      			    			// 主车前进				
			
 					uploading_flat_computer(0xB2);								  // 发送交通灯识别	
					
					Timeout_detection(15,0xA3,0x04);								// 交通灯15s超时检测	
//					Timeout_detection(3,0xA3,0x04);									// 交通灯15s超时检测	
			break;					
		}
		case 0x04:
		{
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
			
					Full_Right(wheel_Speed);                  			// 主车右转	
			
					delay_ms(200);
					Full_RL_little(2);
			
					/*密钥*/
//					KEY_Open[0]=0x00;
//					KEY_Open[1]=0x00;
//					KEY_Open[2]=0x07;
//					KEY_Open[3]=0x57;
//					KEY_Open[4]=0x00;
//					KEY_Open[5]=0x00;	
			
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;			
					/*数据块*/
					Read_Car_Address=extract((char*)TFT_license_plate)+1;	// X*4+N(十进制)
			
					Car_location=0xF2;							//卡的位置
					Car_location_ASCll[0]='F';		//卡的位置ASCll
					Car_location_ASCll[1]='2';		//卡的位置ASCll
			
					Car_Go(Go_Speed, 1800);         // 主车前进	
					Destination_Read_Car();									    			// 主车循迹



					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
					Full_Right(wheel_Speed);                  			// 主车右转	
					Car_Back(30, 200);						 						   		// 主车后退

					switch(Road_Test_Read_Out(1500))
					{
						case 1:
						{
							Car_location=0xF3;							//卡的位置
							Car_location_ASCll[0]='F';			//卡的位置ASCll
							Car_location_ASCll[1]='3';			//卡的位置ASCll
							break;
						}
						case 2:
						{
							Car_location=0xF4;							//卡的位置
							Car_location_ASCll[0]='F';		  //卡的位置ASCll
							Car_location_ASCll[1]='4';		  //卡的位置ASCll					
							break;
						}
					}						
					Send_Zigbee_Data(0x0D,Car_location,Car_location_ASCll[0],Car_location_ASCll[1]);
					// 发送卡位置
					Send_Zigbee_Data(0x0D,Car_location,Car_location_ASCll[0],Car_location_ASCll[1]);
					// 发送卡位置
				
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
	
					SYN_Extern();																		// 语音识别
					
					MP_Tracking(Go_Speed, 850);      			    			// 主车前进		850
					
					uploading_flat_computer(0xB1);									// 发送开始TFTB
//				uploading_flat_computer(0xB1);									// 发送开始TFTB	

					Timeout_detection(60,0xA4,0x05);								// 副车
//					Timeout_detection(3,0xA4,0x05);								// 副车

			break;								
		}		
		case 0x05:
		{
			
					Digital_tube_dynamic_display(66,0);
					Task_board_turn_light(L_LED,1);
			
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
			
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(100);																	// 连续转弯要加延时
					Full_Left(wheel_Speed);                   			// 主车左转		
			
					MP_Tracking(30,1000);												 		// 码盘循迹
 					Into_the_garage();
					Car_Back(30, 1000);						 						   		// 主车后退
					MP_Tracking(30,1000);												 		// 码盘循迹
					Car_Back(30, 1000);						 						   		// 主车后退
					
					Car_Back(30, 1200);						 						   		// 主车后退
		
			
					Send_Debug(quantity((char*)RXRFID)%3+1);
			
					switch(quantity((char*)RXRFID)%3+1)//判断在第几层
					{
						case 1:
						{
							break;
						}
						case 2:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							for(int i=0;i<8;i++)			
							{
								delay_ms(500);
								delay_ms(500);								
							}
							break;
						}						
						case 3:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To3, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To3, 8);
							for(int i=0;i<15;i++)			
							{
								delay_ms(500);
								delay_ms(500);								
							}							
							break;
						}					
						case 4:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To4, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To4, 8);
							for(int i=0;i<22;i++)			
							{
								delay_ms(500);
								delay_ms(500);								
							}
							break;
						}
						default:
						{
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							Send_ZigbeeData_To_Fifo(GarageA_To2, 8);
							for(int i=0;i<8;i++)			
							{
								delay_ms(500);
								delay_ms(500);								
							}							
          		break;
						}
					}
					
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					SYN_Play("运行完成");
 					make_Yes=0xA6;																	// 最后要赋值
					break;								
		}
		
/************************************************************************************************************************************************************
/**********************************************************************
 * 函 数 名 ：  去二维码的位置
 * 参    数 ：  PPP：二维码位置编号
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无 
*****************************************************************/
//void Location_of_QR_code(uint8_t PPP)
//{
//					switch(PPP)
//					{
//						case 1://B3
//						{
//							if(Detected==1)//如果前面检测到路障，这个也一定是路障
//							{
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);					
//								MP_Tracking(30, 100);											//码盘循迹				
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//								MP_Tracking(30, 100);											//码盘循迹						
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//							}
//							/*路况检测*/
//							if(Road_Test_STOP(1400)==1)
//							{
//								delay_ms(500);
//								Detected=1;																	//地形是否检测到标志位
//								Car_Go(Go_Speed, 850);      			    			// 主车前进	
//							}	
//							else
//							{
//								delay_ms(50);					
//								Full_STOP();												       // 主车停车					
//								delay_ms(100);
//								Car_Back(Go_Speed, 850);						 		// 主车后退							
//							}											
//							break;
//						}
//						case 2://C2
//						{
//							if(Detected==1)//如果前面检测到路障，这个也一定是路障
//							{
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);					
//								MP_Tracking(30, 100);											//码盘循迹				
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//								MP_Tracking(30, 100);											//码盘循迹						
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//							}
//							/*路况检测*/
//							if(Road_Test_STOP(1400)==1)
//							{
//								delay_ms(500);
//								Car_Go(Go_Speed, 1200);      			    			// 主车前进
//								delay_ms(500);								
//								Full_STOP();																// 主车停车										
//								delay_ms(50);
//								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
//								delay_ms(50);									
//							}
//							else
//							{
//								delay_ms(50);
//								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
//								delay_ms(50);								
//							}
//							if(Detected==1)//前面没有检测到路障（可能这里有路障）
//							{
//									Car_R45(90, 480);											 					// 右旋转 45度						
//									delay_ms(50);
//									Car_R45(90, 480);																// 右旋转 45度						
//									delay_ms(200);
////									Detected=0;//暂时测试使用---暂时测试使用---暂时测试使用---暂时测试使用---暂时测试使用---暂时测试使用---
//							}
//							else
//							{
//									delay_ms(50);											
//									Full_Right(wheel_Speed);                   // 主车右转		
//									delay_ms(50);	
//									Car_Back(30, 200);						 						//主车后退	
//									delay_ms(200);
//									MP_Tracking(30, 200);						
//									delay_ms(200);
//									Car_Back(30, 200);						 						 //主车后退	
//									delay_ms(200);
//									MP_Tracking(30, 200);						
//									delay_ms(200);	
//									Car_Back(30, 200);						 						   //主车后退	
//									delay_ms(200);
//									MP_Tracking(30, 200);						
//									delay_ms(200);					
//							}
//							/*路况检测*/
//							if(Road_Test_STOP(1850)==1)
//							{
//								delay_ms(500);
//								Detected=1;																	//地形是否检测到标志位
//								Car_Go(Go_Speed, 850+350);      			    			// 主车前进											
//							}	
//							else
//							{
//								delay_ms(100);
//								Car_Back(Go_Speed, 850);						 		// 主车后退							
//							}			
//							break;
//						}
//						case 3://C4
//						{
//							if(Detected==1)//如果前面检测到路障，这个也一定是路障
//							{
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);					
//								MP_Tracking(30, 100);											//码盘循迹				
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//								MP_Tracking(30, 100);											//码盘循迹						
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//							}							
//							delay_ms(50);											
//							Car_R45(90, 480);											 					// 右旋转 45度						
//							delay_ms(50);
//							Car_R45(90, 480);																// 右旋转 45度						
//							delay_ms(200);
//							MP_Tracking(Go_Speed, 850+850);      			    			// 码盘循迹											
//							delay_ms(50);											
//							Full_Right(wheel_Speed);                   // 主车右转		
//							delay_ms(50);	
//							delay_ms(50);	
//							MP_Tracking(Go_Speed, 350);      			    			// 码盘循迹											
//							delay_ms(50);								
//							break;
//						}
//						case 4://D3
//						{
//							if(Detected==1)//如果前面检测到路障，这个也一定是路障
//							{
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);					
//								MP_Tracking(30, 100);											//码盘循迹				
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//								MP_Tracking(30, 100);											//码盘循迹						
//								delay_ms(200);
//								Car_Back(30, 100);						 						 //主车后退	
//								delay_ms(200);
//							}							
//							delay_ms(50);											
//							Car_R45(90, 480);											 					// 右旋转 45度						
//							delay_ms(50);
//							Car_R45(90, 480);																// 右旋转 45度						
//							delay_ms(200);
//							Car_Track(Go_Speed);									     // 主车循迹
//							Full_STOP();																// 主车停车										
//							delay_ms(50);
//							Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进				
//							delay_ms(50);		
//							Full_Left(wheel_Speed);                   					// 主车左转	
//							delay_ms(50);	
//							MP_Tracking(Go_Speed, 850+350);      			    			// 码盘循迹											
//							delay_ms(50);		
//							Full_Left(wheel_Speed);                   					// 主车左转	
//							delay_ms(50);
//							break;
//						}
//						default:break;
//					}		
//}
///**********************************************************************
// * 函 数 名 ：  从暂时停放位置返回到F6
// * 参    数 ：  Temporary："D","5" 0x45 暂时的停放位置 RFID避让点
// * 返 回 值 ：  无
// * 全局变量 ：  无
// * 备    注 ：  B5/C6/D5/F5 其中一个 
//*****************************************************************/
//void Return_coordinate_point(uint8_t Temporary,uint8_t Let)
//{
//	switch(Temporary)
//	{
//		case 25://B5
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转（这里是调头）
//			delay_ms(50);
//			Car_Track(Go_Speed);									        // 主车循迹
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);
//			terrain=1;		
//			Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			terrain=0;
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			if(Let==0xF6)
//			{
//				terrain=1;		
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//				terrain=0;
//			}	
//			else
//			{
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			}			
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);
//			break;
//		}
//		case 36://C6
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转（这里是调头）
//			delay_ms(50);
//			terrain=1;		
//			Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			terrain=0;
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			if(Let==0xF6)
//			{
//				terrain=1;		
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//				terrain=0;
//			}	
//			else
//			{
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			}				
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);			
//			break;
//		}
//		case 45://D5
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转（这里是调头）
//			delay_ms(50);
//			terrain=1;		
//			Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			terrain=0;
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);
//			if(Let==0xF6)
//			{
//				terrain=1;		
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//				terrain=0;
//			}	
//			else
//			{
//				Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			}							
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);			
//			break;
//		}
//		case 0X65://F5
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转（这里是调头）
//			delay_ms(50);
//			terrain=1;					
//			Car_Track(Go_Speed);									        // 主车循迹（这里循迹可能碰到卡）
//			terrain=0;						
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);				
//			break;
//		}
//	}
//}
///**********************************************************************
// * 函 数 名 ：  暂时停放位置
// * 参    数 ：  target_A target_B:ASCLL码 "D","5"   Avoid:避RFID卡让点
// * 返 回 值 ：  返回暂时停放位置 "D","5"-> 45
// * 全局变量 ：  无
// * 备    注 ：  车在D6(车头朝向C6) 目标位置 B5/C6/D5/F5 其中一个
//*****************************************************************/
//uint8_t Temporary_position(uint8_t target_A,uint8_t target_B)
//{
//	uint8_t coordinat;
//	
//	coordinat=(target_A-'@')*10+target_B-'0';
//	switch(coordinat)
//	{
//		case 25://B5
//		{
//			delay_ms(50);
//			Car_Track(Go_Speed);									        // 主车循迹
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转
//			delay_ms(50);		
//			MP_Tracking(Go_Speed, 950);								    // 码盘循迹		
//			delay_ms(50);					
//			break;
//		}
//		case 36://C6
//		{
//			delay_ms(50);		
//			MP_Tracking(Go_Speed, 1200);								// 码盘循迹		
//			delay_ms(50);			
//			break;
//		}
//		case 45://D5
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转
//			delay_ms(50);		
//			MP_Tracking(Go_Speed, 950);								    // 码盘循迹		
//			delay_ms(50);						
//			break;
//		}
//		case 65://F5
//		{
//			delay_ms(50);
//			Full_Right(wheel_Speed);                  		// 主车右转
//			delay_ms(50);		
//			Full_Right(wheel_Speed);                  		// 主车右转
//			delay_ms(50);
//			terrain=1;
//			Car_Track(Go_Speed);									        // 主车循迹
//			terrain=0;
//			delay_ms(50);
//			Car_Go(Go_Speed, Go_Temp);      			    	  // 主车前进				
//			delay_ms(50);
//			Full_Left(wheel_Speed);                   		// 主车左转	
//			delay_ms(50);		
//			MP_Tracking(Go_Speed, 950-200);								    // 码盘循迹		
//			delay_ms(50);							
//			break;
//		}
//		default:
//		{
//			delay_ms(50);		
//			MP_Tracking(Go_Speed, 1200);								// 码盘循迹		
//			delay_ms(50);
//			coordinat=0xC5;			
//			break;			
//		}
//	}
//	return coordinat;
//}
///**********************************************************************
// * 函 数 名 ：  RFID数据提取有效字节
// * 参    数 ：  RFID_DATA：需要提取的数据（12个字节）
// * 返 回 值 ：  无
// * 全局变量 ：  RFID_accomplish：提取后的字节
// * 备    注 ：  无
//*****************************************************************/
//uint8_t RFID_extraction[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };//RFID数据提取有效字节参照
//void RFID_extraction_data(uint8_t* RFID_DATA,uint8_t* RFID_OUT_DA)
//{
//	uint8_t circulation = 0;
//	for (int i = 0; i < 12; i++)
//	{	
//		for (char i2 = 0; i2 < 16; i2++)
//		{
//			if (RXRFID[i] == RFID_extraction[i2])
//			{
//				if (circulation == 0)
//				{					
//					RFID_OUT_DA[i/2] += i2<<4;
//					circulation = 1;
//				}
//				else
//				{
//					RFID_OUT_DA[i/2] += i2;
//					circulation = 0;
//				}				
//				break;
//			}
//		}
//	}
//}
///**********************************************************************
// * 函 数 名 ：  RFID数据提取数据
// * 参    数 ：  无
// * 返 回 值 ：  提取的数据
// * 全局变量 ：  无
// * 备    注 ：  2018国赛题  RFID数据  Y
//*****************************************************************/
//uint8_t RFID_Extraction_1(void)
//{
//	 return (RFID_RH8[2]-'0')*10+(RFID_RH8[3]-'0');
//}
///**********************************************************************
// * 函 数 名 ：  RFID数据提取数据
// * 参    数 ：  无
// * 返 回 值 ：  提取的数据
// * 全局变量 ：  无
// * 备    注 ：  2018国赛题  RFID数据  Rr
//*****************************************************************/
//uint8_t RFID_Extraction_2(void)
//{	
//	return (RFID_RL8[4]-'@')*10+(RFID_RL8[5]-'0');
//}
///**********************************************************************
// * 函 数 名 ：  路灯档位计算
// * 参    数 ：  测距距离MO1
// * 返 回 值 ：  路灯档位
// * 全局变量 ：  无
// * 备    注 ：  ((MOV/60)^(MOV/60))%4+1  （2020省赛用到的）
//*****************************************************************/
//uint8_t Calculation_of_street_lamp_stalls(uint16_t Mo1)
//{
//	uint16_t answer;
//    Mo1 /= 60;
//	answer = Mo1;
//	for (uint8_t i = 0; i < (Mo1-1); i++)
//	{
//		answer *= Mo1;
//	}
//	answer %= 4;
//	answer += 1;
//	return answer;
//}
/**********************************************************************
 * 函 数 名 ：  后退循迹
 * 参    数 ：  速度
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无 法 使 用-无 法 使 用-无 法 使 用              
*****************************************************************/
//void retreat_trace(uint8_t speed)
//{
//		uint16_t Trace_H8;
//		uint16_t Trace_Q7;
//		int Lspeed;
//		int Rspeed;
//		while(1)
//		{
//				Trace_H8=Get_Host_UpTrack(TRACK_H8);
//				Trace_Q7=Get_Host_UpTrack(TRACK_Q7);
//				if(Trace_Q7==0x7F|Trace_Q7==0x00)
//				{
//					break;
//				}
//				if(Trace_H8==0xE7|Trace_H8==0xF7|Trace_H8==0xEF|Trace_Q7==0x77)//正常
//				{
//						Lspeed=-speed;
//						Rspeed=-speed;					
//				}
//				else if(Trace_H8==0xF3|Trace_H8==0xFB|Trace_Q7==0x73|Trace_Q7==0x7B)//微偏左
//				{
//						Lspeed=-speed+30;
//						Rspeed=-speed-30;					
//				}	
//				else if(Trace_H8==0xF9|Trace_H8==0xFD|Trace_Q7==0x79)
//				{
//						Lspeed=-speed+40;
//						Rspeed=-speed-60;					
//				}
//				else if(Trace_H8==0xFC|Trace_Q7==0x7D|Trace_Q7==0x7C)
//				{
//						Lspeed=-speed+50;
//						Rspeed=-speed-90;					
//				}				
//				else if(Trace_H8==0xFE|Trace_Q7==0x7E)
//				{
//						Lspeed=-speed+60;
//						Rspeed=-speed-120;					
//				}
//				
//				else if(Trace_H8==0xCF|Trace_Q7==0x67|Trace_Q7==0x6F)
//				{
//						Rspeed=-speed+30;
//						Lspeed=-speed-30;					
//				}	
//				
//				else if(Trace_H8==0x9F|Trace_H8==0xDF|Trace_Q7==0x4F)
//				{
//						Rspeed=-speed+40;
//						Lspeed=-speed-60;					
//				}
//				else if(Trace_H8==0x3F|Trace_H8==0xBF|Trace_Q7==0x5F|Trace_Q7==0x1F)
//				{
//						Rspeed=-speed+50;
//						Lspeed=-speed-90;									
//				}				
//				else if(Trace_H8==0x7F|Trace_Q7==0x3F)
//				{
//						Rspeed=-speed+60;
//						Lspeed=-speed-120;									
//				}	
//				Send_UpMotor(Rspeed, Lspeed);
//				delay_ms(3);
//		}
//		Send_UpMotor(0, 0);

//}
//uint8_t LD(uint16_t MOV_1);
uint8_t extract(char *chepai);
uint8_t quantity(char *data_temp);


///**********************************************************************
// * 函 数 名 ： 	路灯档位计算
// * 参    数 ：  MOV_1 距离
// * 返 回 值 ：  路灯档位
// * 全局变量 ：  无
// * 备    注 ：  无
//*****************************************************************/
//uint8_t LD(uint16_t MOV_1)
//{
//	double LD_e = 2.718281;
//	return Square_root((LD_e + 1), (MOV_1 / 60)) % 4 + 1;
//}
/**********************************************************************
 * 函 数 名 ：  自由路径 1.0（X轴优先）
 * 参    数 ：  start:初始位置  finish：终点位置 direction：车头朝向方向
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无
*****************************************************************/
//void Free_path(uint8_t start,uint8_t finish,uint8_t direction)
//{
//	uint8_t init_X,init_Y,end_X,end_Y;
//	int difference_value_X,difference_value_Y,wheel;
//	init_X = start/16;
//	init_Y = start%16;
//	end_X = finish/16;
//	end_Y = finish%16;

//	difference_value_X=end_X-init_X;//x轴差值获取
//	difference_value_Y=init_Y-end_Y;//y轴差值获取
//	wheel= difference_value_X;

//	Directional_X(difference_value_X,difference_value_Y,direction);//车头朝向调整（X轴优先）
//	
//	while(difference_value_X!=0)//X轴循迹
//	{
//			Full_Tracking(Go_Speed);            // 主车循迹	
//			Car_Go(Go_Speed, Go_Temp);					// 主车前进	
//			if(difference_value_X>0)
//			{
//				difference_value_X-=2;
//			}
//			if(difference_value_X<0)
//			{
//				difference_value_X+=2;
//			}
//			if(difference_value_X==0)
//			{
//					if(wheel>0)
//					{
//						if(difference_value_Y>0)
//						{
//							Car_Left(wheel_Speed);                  // 主车左转							
//						}
//						else if(difference_value_Y<0)
//						{
//							Car_Right(wheel_Speed);                  // 主车右转							
//						}
//					}
//					else if(wheel<0)
//					{
//						if(difference_value_Y<0)
//						{
//							Car_Left(wheel_Speed);                  // 主车左转							
//						}
//						else if(difference_value_Y>0)
//						{
//							Car_Right(wheel_Speed);                  // 主车右转							
//						}					
//					}
//			}
//	}
//	while(difference_value_Y!=0)//Y轴循迹
//	{
//			Car_Track(Go_Speed);                  // 主车循迹	
//			Car_Go(Go_Speed, Go_Temp);						// 主车前进			
//			if(difference_value_Y>0)
//			{
//				difference_value_Y-=2;
//			}
//			if(difference_value_Y<0)
//			{
//				difference_value_Y+=2;
//			}
//	}
//}

///**********************************************************************
// * 函 数 名 ：  自由路径 1.0（Y轴优先）
// * 参    数 ：  start:初始位置  finish：终点位置 direction：车头朝向方向
// * 返 回 值 ：  无
// * 全局变量 ：  无
// * 备    注 ：  无
//*****************************************************************/
//void Free_path2(uint8_t start,uint8_t finish,uint8_t direction)
//{
//	uint8_t init_X,init_Y,end_X,end_Y;
//	int difference_value_X,difference_value_Y,wheel;
//	init_X = start/16;
//	init_Y = start%16;
//	end_X = finish/16;
//	end_Y = finish%16;

//	difference_value_X=end_X-init_X;//x轴差值获取
//	difference_value_Y=init_Y-end_Y;//y轴差值获取
//	wheel= difference_value_Y;

//	Directional_Y(difference_value_X,difference_value_Y,direction);//车头朝向调整（Y轴优先）
//	
//	while(difference_value_Y!=0)//Y轴循迹
//	{
//			Full_Tracking(Go_Speed);            // 主车循迹	
//			Car_Go(Go_Speed, Go_Temp);					// 主车前进	
//			if(difference_value_Y>0)
//			{
//				difference_value_Y-=2;
//			}
//			if(difference_value_Y<0)
//			{
//				difference_value_Y+=2;
//			}
//			if(difference_value_Y==0)
//			{
//					if(wheel<0)
//					{
//						if(difference_value_X>0)
//						{
//							Car_Left(wheel_Speed);                  // 主车左转							
//						}
//						else if(difference_value_X<0)
//						{
//							Car_Right(wheel_Speed);                  // 主车右转							
//						}
//					}
//					else if(wheel>0)
//					{
//						if(difference_value_X<0)
//						{
//							Car_Left(wheel_Speed);                  // 主车左转							
//						}
//						else if(difference_value_X>0)
//						{
//							Car_Right(wheel_Speed);                  // 主车右转							
//						}					
//					}
//			}
//	}
//	while(difference_value_X!=0)//X轴循迹
//	{
//			Car_Track(Go_Speed);                  // 主车循迹	
//			Car_Go(Go_Speed, Go_Temp);						// 主车前进			
//			if(difference_value_X>0)
//			{
//				difference_value_X-=2;
//			}
//			if(difference_value_X<0)
//			{
//				difference_value_X+=2;
//			}
//	}
//}


/**********************************************************************
 * 函 数 名 ：  车头朝向调整 
 * 参    数 ：  direction：初始车头朝向方向 need_direction：目标方向
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无
*****************************************************************/
//void Head_on_adjustment(uint8_t direction,uint8_t need_direction)
//{
//	switch(direction)
//	{
//		case east://东 
//		{
//			switch(need_direction)
//      {
//      	case south://南
//				{
//					Car_Right(wheel_Speed);                  // 主车右转							
//      		break;
//				}
//				case west://西 
//				{
//					Car_Right(wheel_Speed);                  // 主车右转				
//					Car_Right(wheel_Speed);                  // 主车右转									
//      		break;
//				}
//      	case north://北 
//				{
//					Car_Left(wheel_Speed);                  // 主车左转								
//      		break;
//				}
//      	default:break;
//      }
//			break;
//		}
//		case south://南
//		{
//			switch(need_direction)
//      {
//      	case east://东 
//				{
//					Car_Left(wheel_Speed);                  // 主车左转					
//      		break;
//				}
//				case west://西 
//				{
//					Car_Right(wheel_Speed);                  // 主车右转					
//      		break;
//				}
//      	case north://北 
//				{
//					Car_Left(wheel_Speed);                  // 主车左转
//					Car_Left(wheel_Speed);                  // 主车左转					
//      		break;
//				}
//      	default:break;
//			}
//			break;
//		}
//		case west://西 
//		{
//			switch(need_direction)
//      {
//      	case east://东 
//				{
//					Car_Right(wheel_Speed);                  // 主车右转
//					Car_Right(wheel_Speed);                  // 主车右转				
//      		break;
//				}
//      	case south://南
//				{
//					Car_Left(wheel_Speed);                  // 主车左转					
//      		break;
//				}
//      	case north://北 
//				{
//					Car_Right(wheel_Speed);                  // 主车右转					
//      		break;
//				}
//      	default:break;
//			}			break;
//		}
//		case north://北 
//		{
//			switch(need_direction)
//      {
//      	case east://东 
//				{
//					Car_Right(wheel_Speed);                  // 主车右转
//      		break;
//				}
//      	case south://南
//				{
//					Car_Right(wheel_Speed);                  // 主车右转
//					Car_Right(wheel_Speed);                  // 主车右转
//      		break;
//				}
//				case west://西 
//				{
//					Car_Left(wheel_Speed);                  // 主车左转					
//      		break;
//				}
//      	default:break;
//			}			break;
//		}
//		default:break;
//	}
//}

/**********************************************************************
 * 函 数 名 ：  坐标差值车头朝向调整（X轴优先）
 * 参    数 ：  difference_X：x轴差值 difference_Y：y轴差值 direction：初始车头朝向方向
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无
*****************************************************************/
//void Directional_X(int difference_X,int difference_Y,uint8_t direction)
//{
//		if(difference_X>0)
//		{
//			Head_on_adjustment(direction,east);//东
//		}
//		if(difference_X<0)
//		{
//				Head_on_adjustment(direction,west);//西				
//		}
//		if(difference_X==0)
//		{
//			if(difference_Y>0)
//			{
//				Head_on_adjustment(direction,north);//北								
//			}
//			if(difference_Y<0)
//			{
//				Head_on_adjustment(direction,south);//南							
//			}	
//		}
//}

/**********************************************************************
 * 函 数 名 ：  坐标差值车头朝向调整（Y轴优先）
 * 参    数 ：  difference_X：x轴差值 difference_Y：y轴差值 direction：初始车头朝向方向
 * 返 回 值 ：  无
 * 全局变量 ：  无
 * 备    注 ：  无
*****************************************************************/
//void Directional_Y(int difference_X,int difference_Y,uint8_t direction)
//{
//		if(difference_Y>0)
//		{
//			Head_on_adjustment(direction,north);//北
//		}
//		if(difference_Y<0)
//		{
//				Head_on_adjustment(direction,south);//南			
//		}
//		if(difference_Y==0)
//		{
//			if(difference_X>0)
//			{
//				Head_on_adjustment(direction,east);//东							
//			}
//			if(difference_X<0)
//			{
//				Head_on_adjustment(direction,west);//西						
//			}	
//		}
//}
uint8_t quantity(char *data_temp)
{
	uint8_t temp=0;
	for (int i = 0; i < 16; i++)
	{
		if (data_temp[i] == 'A')
		{
			temp += 1;
		}
	}
	return temp;
}

uint8_t extract(char *chepai)
{
	char temp;
	uint8_t TP[6];
	uint8_t Big=0;
	for (int i = 0; i < 6; i++)
	{
		TP[i] = chepai[i];
	}
	for (int i = 0; i < 6; i++)
	{
		if (TP[i] < '0' || TP[i] > '9')
		{	
			TP[i] = 0xFF;
		}
		else
		{
			TP[i] -= '0';
		}
	}
	for (int i = 0; i < 6; i++)
	{
		for (int ii = 0; ii < 5; ii++)
		{
			if (TP[ii] > TP[ii + 1])
			{
				temp = TP[ii];
				TP[ii] = TP[ii + 1];
				TP[ii + 1] = temp;
			}
		}
	}
	for (int i = 0; i < 6; i++)
	{
		if (TP[i] != 0xff)
		{
			Big = TP[i] * 10;
			break;
		}
	}
	for (int i = 0; i < 6; i++)
	{
		if (TP[5-i] != 0xff)
		{
			Big += TP[5 - i];
			break;
		}
	}
	return Big;
}
/***************************************************************/
	#if 0
		switch(make_Yes)
		{
				case 0x01:
				{
					Send_Debug_Info((uint8_t*)"Start->\n",8);
					SYN_Play("开始启动");				

					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					Car_Go(Go_Speed, Go_Temp+350);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					Car_R45(90, 480);																// 右旋转(45)度	
					
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					uploading_flat_computer(0xB0);									// 发送开始TFTA
					
					Timeout_detection(20,0xA1,0x02);								// TFTA(车牌)20s超时检测
					break;	
				}
				case 0x02:
				{
					Car_L45(90, 480);																// 左旋转(45)度	

					Full_Left(wheel_Speed);                   			// 主车左转
					
					Road_Test_two_stage(1850);								   		// 两段中间点有路障检测
			
					uploading_flat_computer(0xB4);									// 发送开始二维码A识别
					uploading_flat_computer(0xB4);            			// 发送开始二维码A识别		

					Timeout_detection(10,0xA2,0x03);								// 二维码A10s超时检测					
					break;				
				}
				case 0x03:
				{
					/*测距*/
					Distance_temp=Stadiometry();																	// 测距	
					/*密钥*/
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;	
					/*数据块*/
					Read_Car_Address=Static_marker_1[0]*4+Static_marker_1[1];	// X*4+N(十进制)
					
					Track_7=Get_Host_UpTrack(TRACK_Q7);							// 检测B6的卡
					if(Track_7 == 0x3E | Track_7 == 0x1E | Track_7 == 0x3C | Track_7 == 0x1c)
					{	
						RFID_detection_motion();											// RFID微动检测
						Car_location=0xB6;
						Car_location_ASCll[0]='B';
						Car_location_ASCll[1]='6';						
					}	
					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Right(wheel_Speed);                  			// 主车右转	
					
					switch(Road_Test_Read_Out(1400))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xB5;
							Car_location_ASCll[0]='B';
							Car_location_ASCll[1]='5';
							break;
						}
						case 0x02:
						{
							Car_location=0xB4;
							Car_location_ASCll[0]='B';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}					
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转
					
					Car_Go(Go_Speed, 60);      			    						// 主车前进	

					uploading_flat_computer(0xB1);									// 发送开始TFTB
					uploading_flat_computer(0xB1);									// 发送开始TFTB
					
					Timeout_detection(30,0xA3,0x04);								// TFTB(图形)30s超时检测
					break;
				}
				case 0x04:
				{
					Car_Back(Go_Speed, 60); 	    			    				// 主车后退
				/*（Graph[0]：矩形 ）（Graph[1]：圆形 ）（Graph[2]：三角）（Graph[3]: 菱形）（Graph[4]：五角星）*/
					TFT_Test_Zigbee('B',0x40,0xA0+Graph[0],0xD0+Graph[3],0xE0+Graph[4]);			//TFTB显示		
					
					Send_Zigbee_Data(0x05,(Graph[1]+Graph[2])%4+1,0x00,0x00);					// 发送副车车库层数
					Send_Zigbee_Data(0x05,(Graph[1]+Graph[2])%4+1,0x00,0x00);					// 发送副车车库层数
					
					Full_Left(wheel_Speed);                   			// 主车左转
					delay_ms(100);																	// 连续转弯要加延时
					Full_Left(wheel_Speed);                   			// 主车左转
					
					switch(Road_Test_Read_Out(1850))									//路况检测+中途读卡+终点读卡(单段)
					{
						case 0x01:						
						{							
							Car_location=0xC4;
							Car_location_ASCll[0]='C';
							Car_location_ASCll[1]='4';
							break;
						}
						case 0x02:
						{
							Car_location=0xD4;
							Car_location_ASCll[0]='D';
							Car_location_ASCll[1]='4';
							break;
						}
						default:break;
					}	
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进						
					Full_Left(wheel_Speed);                   			// 主车左转
					Car_L45(90, 480);																// 左旋转(45)度	

					
					/*LZW算法-烽火台开启码*/
					
					LZW_Coding(RXRFID);	//LZW编码
					Send_Zigbee_Data(0X0E,LZW_Code_Stream[0],LZW_Code_Stream[1],LZW_Code_Stream[2]);					// 发送启动副车
					Send_Zigbee_Data(0X0F,LZW_Code_Stream[3],LZW_Code_Stream[4],LZW_Code_Stream[5]);					// 发送启动副车

					
					
					/*立体显示FID卡位置+距离*/
					stereo_display[0]=Car_location_ASCll[0];
					stereo_display[1]=Car_location_ASCll[1];
					stereo_display[2]=0;
					stereo_display[3]=0;
					stereo_display[4]=0;
					stereo_display[5]=0;		
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示
					Rotate_show_Inf((char*)stereo_display,(Distance_temp/100)+'0',(Distance_temp%100/10)+'0');//立体显示										
					
					Car_R45(90, 480);																// 右旋转(45)度	
					Full_Right(wheel_Speed);                  			// 主车右转	

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转

					Gate_Show_Zigbee((char*)TFT_license_plate);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					Gate_Show_Zigbee((char*)TFT_license_plate);			// 道闸显示车牌
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					SYN_Extern();																		// 语音识别
					
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车					
					SYN_Play("小伙伴启动");
					
					Full_Left(wheel_Speed);                   			// 主车左转
					ETC_detection();																// ETC检测
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
				
					/*交通灯识别*/
					uploading_flat_computer(0xB2);									// 发送交通灯识别
					uploading_flat_computer(0xB2);								  // 发送交通灯识别	
					
					Timeout_detection(15,0xA4,0x05);								// 交通灯15s超时检测				
					break;
				}
				case 0x05:
				{
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					
					n_Fifo=Dimming(Static_marker_1[2]%4+1);  				// 调光并获取档位	
					
					//B2出发  倒车入库
					if(n_Fifo%3==0)//B7
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测						
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						MP_Tracking(30,1000);												 		// 码盘循迹（防止中途有卡）
						terrain=1;																			// 开启地形检测（防止终点有卡）
						Car_Track(Go_Speed);									    			// 主车循迹
						terrain=0;																			// 关闭地形检测	
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
	
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1000);						 						   		// 主车后退
					}
					else if(n_Fifo%3==1)//B1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						Car_Back(30, 1000);						 						   		// 主车后退
					}
					else if(n_Fifo%3==2)//D1
					{
						Full_Left(wheel_Speed);                   			// 主车左转
						delay_ms(100);																	// 连续转弯要加延时
						Full_Left(wheel_Speed);                   			// 主车左转	

						Car_Track(Go_Speed);									    			// 主车循迹
						Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
						Full_Right(wheel_Speed);                  			// 主车右转	
						
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						MP_Tracking(30,1000);												 		// 码盘循迹
						Car_Back(30, 1000);						 						   		// 主车后退
						
						Car_Back(30, 1000);						 						   		// 主车后退						
					}
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					//Digital_tube_dynamic_display(9,1);							// 数码管显示

					SYN_Play("运行完成");
 					make_Yes=0xA5;																	// 最后要赋值
					break;
				}
			}
		#endif
/*************************************************************************************************************************************************************
		
		自命题1
			#if 0
			switch (make_Yes)
      {
      	case 0x01:
				{
					/*启动LED计时器*/					
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					Send_ZigbeeData_To_Fifo(SMG_TimClear, 8);       // LED显示标志物计时模式 -> 清零
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启					
					Send_ZigbeeData_To_Fifo(SEG_TimOpen, 8);    		// LED显示标志物计时模式 -> 开启

					Send_ZigbeeData_To_Fifo(GarageA_To1, 8);			
					Send_ZigbeeData_To_Fifo(GarageA_To1, 8);
	
					KEY_Open[0]=0xff;
					KEY_Open[1]=0xff;
					KEY_Open[2]=0xff;
					KEY_Open[3]=0xff;
					KEY_Open[4]=0xff;
					KEY_Open[5]=0xff;			
					/*数据块*/
					Read_Car_Address=10;	// X*4+N(十进制)			
					
//					Car_Go(Go_Speed, Go_Temp+330);      					  // 主车前进
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					Full_Right(wheel_Speed);                  			// 主车右转		

					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
					Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启

					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Full_Left(wheel_Speed);                   			// 主车左转
					Full_RL_little(1,90);

					Car_Back(Go_Speed, Go_Temp-20);      			    	// 主车ht
					Card_One(1837);
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					uploading_flat_computer(0xB1);									// 发送开始TFTB
					
//					Timeout_detection(3,0xA1,0x02);									// TFTA(图形)30s超时检测						
					Timeout_detection(30,0xA1,0x02);								// TFTA(图形)30s超时检测

      		break;
				}
      	case 0x02:
				{
					Car_Back(Go_Speed, Go_Temp-20);      			    	// 主车ht
					Card_One(1837);
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进
					
					
					uint8_t Ot = 0;
					for (int i = 0; i < 16; i++)
					{
						if (RXRFID[i] == '>')
						{
							Ot= RXRFID[i+1];
							break;
						}
					}
					Send_Zigbee_Data(0x0B,Ot,Ot,Ot);				
					Send_Zigbee_Data(0x0B,Ot,Ot,Ot);				
							
					SYN_Extern();																		// 语音识别					
					
					Full_Left(wheel_Speed);                   			// 主车左转
					ETC_detection();																// ETC
					
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	

					
					Full_Right(wheel_Speed);                  			// 主车右转		
					Dimming(Oupt%4+1);															// 调光	
					Full_Right(wheel_Speed);                  			// 主车右转		
					delay_ms(200);
					Full_Right(wheel_Speed);                  			// 主车右转		
										
					MP_Tracking(30,450);												 		// 码盘循迹
 					uploading_flat_computer(0xB2);								  // 发送交通灯识别	
									
					Timeout_detection(15,0xA2,0x03);								// 交通灯15s超时检测	
//					Timeout_detection(3,0xA2,0x03);									// 交通灯15s超时检测
      		break;
				}
      	case 0x03:
				{				
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		

					uploading_flat_computer(0xB4);									// 发送开始二维码A识别

//					Timeout_detection(3,0xA3,0x04);									// 二维码A10s超时检测								
					Timeout_detection(10,0xA3,0x04);								// 二维码A10s超时检测						
      		break;
				}
      	case 0x04:
				{		
					Car_Back(Go_Speed, Go_Temp-20);      			    	// 主车ht
					Card_One(1837);

					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进							
					Car_L45(90, 480);																// L旋转 45度		
					delay_ms(200);
					Car_L45(90, 480);																// L旋转 45度					
					Full_RL_little(2,100);
					Car_Back(Go_Speed, 600);      			   			    // 主车ht
					Full_RL_little(1,90);
					
					Car_Go(Go_Speed, 2200);      			    			    // 主车前进							
					Car_Track(Go_Speed);									    			// 主车循迹
					Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
	
					Car_L45(90, 480);																// L旋转 45度		
					delay_ms(200);
					Car_R45(90, 480);																// R旋转 45度	
					delay_ms(200);
					Full_Right(wheel_Speed);                  			// 主车右转		
					Car_Track(Go_Speed);									    			// 主车循迹
	
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车
					Send_Zigbee_Data(0x00,0x00,0x00,0x00);					// 发送启动副车

					Timeout_detection(60,0xA4,0x05);								// 副车
      		break;
				}
      	case 0x05:
				{	
					switch(Number_A)
					{
						case 0x01:
						{
								Full_Right(wheel_Speed);                  			// 主车右转
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
								Full_Right(wheel_Speed);                  			// 主车右转		
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
								Full_Right(wheel_Speed);                  			// 主车右转
								delay_ms(200);				
								Full_Right(wheel_Speed);                  			// 主车右转		
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);				
								delay_ms(500);			
								delay_ms(500);				
								delay_ms(500);			
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启							
								Car_Track(Go_Speed);									    			// 主车循迹
								Card_One(2285);
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
								delay_ms(200);				
								Car_L45(90, 480);																// L旋转 45度		
								delay_ms(200);
								Car_L45(90, 480);																// L旋转 45度	
								delay_ms(200);
								Car_L45(90, 480);																// L旋转 45度		
								delay_ms(200);
								Car_L45(90, 480);																// l旋转 45度	
								delay_ms(200);
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进	
								
								Full_RL_little(2,100);
								Full_RL_little(2,100);
								Car_Back(Go_Speed, 1800);      			   			 // 主车ht
					break;
						}	
						case 0x02:
						{
								Full_Right(wheel_Speed);                  			// 主车右转
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
								Full_Right(wheel_Speed);                  			// 主车右转		
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
								Send_ZigbeeData_To_Fifo(Gate_Open, 8);      	  // 道闸 -> 开启
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进		
								Full_Left(wheel_Speed);                   			// 主车左转
								Car_Back(Go_Speed, Go_Temp-20);      			    	// 主车ht											
								MP_Tracking(30,300);												 		// 码盘循迹
								Car_Back(30, 300);						 						   		// 主车后退
								MP_Tracking(30,300);												 		// 码盘循迹
								Car_Back(30, 300);						 						   		// 主车后退
								Car_Back(30, 1200);						 						   		// 主车后退									
						}	
						default:
						{		
								Full_Right(wheel_Speed);                  			// 主车右转
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进								
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进								
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进								
								Full_Left(wheel_Speed);                   			// 主车左转
								Car_Track(Go_Speed);									    			// 主车循迹
								Car_Go(Go_Speed, Go_Temp);      			    			// 主车前进								
								Full_Right(wheel_Speed);                  			// 主车右转
								delay_ms(200);				
								Full_Right(wheel_Speed);                  			// 主车右转		
								MP_Tracking(30,1000);												 		// 码盘循迹
								Car_Back(30, 1000);						 						   		// 主车后退
								MP_Tracking(30,1000);												 		// 码盘循迹
								Car_Back(30, 1000);						 						   		// 主车后退
								
								Car_Back(30, 1200);						 						   		// 主车后退	
							}						
					}
					
					
					/*无线充电开启*/						
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					Send_ZigbeeData_To_Fifo(Charge_Open, 8);        // 无线充电标志物开启
					/*LED计时关闭*/
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					delay_ms(200);
					Send_ZigbeeData_To_Fifo(SMG_TimClose, 8);       // LED显示标志物计时模式 -> 关闭
					
					SYN_Play("运行完成");
 					make_Yes=0xA6;																	// 最后要赋值
      		break;
				}
      	default:
      		break;
      }
			#endif

		
		
/****************************************************************
 * 函 数 名 ：  简单数据压缩算法
 * 参    数 ：  Input:数据数组（  <=16 位   ） 
 * 返 回 值 ：  无
 * 全局变量 ：  Output[4]:压缩后数据
 * 备    注 ：  ABC  A=0x01  B=0x02   C=0x03
 *	ABCD 压缩->  6			
****************************************************************/
uint8_t Output[4];//简单数据压缩算法数据压缩后的数据
void Compress_data(char* Input_data)
{
	uint32_t Temp = 0;
	for (uint8_t i = 0; i < 16; i++)
	{
		Temp <<= 2;
		if (Input_data[i] == 'A')
		{
			Temp |= 0x01;
		}
		else if (Input_data[i] == 'B')
		{
			Temp |= 0x02;
		}
		else if (Input_data[i] == 'C')
		{
			Temp |= 0x03;
		}
	}
	for (uint8_t i = 0; i < 4; i++)
	{
		Output[3-i] = Temp & 0x000000FF;
		Temp >>= 8;
	}
}	
		
		
		
		
		
		
		
		
